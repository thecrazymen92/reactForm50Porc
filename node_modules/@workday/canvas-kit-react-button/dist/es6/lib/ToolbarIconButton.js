var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var _a;
import * as React from 'react';
import { colors, spacing, borderRadius } from '@workday/canvas-kit-react-core';
import { focusRing, useTheme } from '@workday/canvas-kit-react-common';
import { SystemIcon } from '@workday/canvas-kit-react-icon';
import { ButtonContainer } from './parts';
var containerStyles = (_a = {
        padding: 0,
        minWidth: spacing.l,
        width: spacing.l,
        height: spacing.l,
        borderRadius: borderRadius.m
    },
    _a['& .wd-icon'] = {
        display: 'inline-block',
        verticalAlign: 'middle',
        width: 20,
        height: 20,
    },
    _a);
var ToolbarIconButton = function (_a) {
    var _b = _a.theme, theme = _b === void 0 ? useTheme() : _b, buttonRef = _a.buttonRef, onToggleChange = _a.onToggleChange, iconArialabel = _a["aria-label"], icon = _a.icon, toggled = _a.toggled, children = _a.children, elemProps = __rest(_a, ["theme", "buttonRef", "onToggleChange", 'aria-label', "icon", "toggled", "children"]);
    var isInitialMount = React.useRef(true);
    React.useEffect(function () {
        if (isInitialMount.current) {
            isInitialMount.current = false;
        }
        else {
            if (toggled && typeof onToggleChange === 'function') {
                onToggleChange(toggled);
            }
        }
    }, [toggled, onToggleChange]);
    return (React.createElement(ButtonContainer, __assign({ colors: getToolbarIconButtonColors(theme, toggled), size: 'small', ref: buttonRef, fillIcon: toggled, extraStyles: containerStyles, "aria-pressed": toggled, "aria-label": iconArialabel }, elemProps), icon ? React.createElement(SystemIcon, { icon: icon }) : children));
};
export default ToolbarIconButton;
var getToolbarIconButtonColors = function (theme, toggled) {
    var themePrimary = theme.canvas.palette.primary;
    return {
        default: {
            icon: toggled ? themePrimary.main : colors.licorice200,
            background: toggled ? themePrimary.lightest : 'transparent',
        },
        hover: {
            icon: toggled ? themePrimary.dark : colors.licorice500,
            background: colors.soap300,
        },
        active: {
            icon: toggled ? themePrimary.dark : colors.licorice500,
            background: colors.soap500,
        },
        focus: {
            icon: toggled ? themePrimary.main : colors.licorice200,
            focusRing: focusRing({ width: 2, separation: 0 }, theme),
            background: toggled ? themePrimary.lightest : 'transparent',
        },
        disabled: {
            icon: toggled ? themePrimary.light : colors.soap600,
            background: toggled ? themePrimary.lightest : 'transparent',
        },
    };
};
