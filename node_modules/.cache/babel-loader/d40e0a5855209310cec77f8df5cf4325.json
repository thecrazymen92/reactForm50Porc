{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { type } from '@workday/canvas-kit-labs-react-core';\nimport { focusRing, useTheme } from '@workday/canvas-kit-react-common';\nimport { colors, spacing, borderRadius } from '@workday/canvas-kit-react-core';\nimport { TextButtonVariant, ButtonIconPosition } from './types';\nimport { ButtonContainer, ButtonLabelIcon, ButtonLabel } from './parts';\n\nvar getTextButtonColors = function getTextButtonColors(variant, theme) {\n  var themePrimary = theme.canvas.palette.primary;\n\n  switch (variant) {\n    case TextButtonVariant.Default:\n    default:\n      return {\n        default: {\n          icon: themePrimary.main,\n          label: themePrimary.main\n        },\n        hover: {\n          background: colors.soap200,\n          icon: themePrimary.dark,\n          label: themePrimary.dark\n        },\n        active: {\n          background: colors.soap300,\n          icon: themePrimary.dark,\n          label: themePrimary.dark\n        },\n        focus: {\n          icon: themePrimary.dark,\n          label: themePrimary.dark,\n          focusRing: focusRing({}, theme)\n        },\n        disabled: {\n          background: 'transparent',\n          icon: themePrimary.light,\n          label: themePrimary.light\n        }\n      };\n\n    case TextButtonVariant.Inverse:\n      return {\n        default: {\n          background: 'transparent',\n          icon: colors.frenchVanilla100,\n          label: colors.frenchVanilla100\n        },\n        hover: {\n          background: colors.frenchVanilla100,\n          icon: colors.blackPepper400,\n          label: colors.blackPepper400\n        },\n        active: {\n          background: colors.soap200,\n          icon: colors.blackPepper400,\n          label: colors.blackPepper400\n        },\n        focus: {\n          background: colors.frenchVanilla100,\n          icon: colors.blackPepper400,\n          label: colors.blackPepper400,\n          focusRing: focusRing({\n            separation: 2,\n            inset: 'inner',\n            innerColor: 'currentColor',\n            outerColor: colors.frenchVanilla100\n          }, theme)\n        },\n        disabled: {\n          background: 'transparent',\n          icon: 'rgba(255, 255, 255, 0.5)',\n          label: 'rgba(255, 255, 255, 0.5)'\n        }\n      };\n  }\n};\n\nvar containerStyles = {\n  borderRadius: borderRadius.m,\n  border: '0',\n  padding: \"0 \" + spacing.xxs,\n  minWidth: 'auto',\n  '.wdc-text-button-label': {\n    borderBottom: '2px solid transparent',\n    paddingTop: '2px',\n    transition: 'border-color 0.3s'\n  },\n  '&:hover:not([disabled]) .wdc-text-button-label': {\n    borderBottomColor: 'currentColor'\n  }\n};\n\nvar TextButton = function TextButton(_a) {\n  var _b = _a.theme,\n      theme = _b === void 0 ? useTheme() : _b,\n      _c = _a.variant,\n      variant = _c === void 0 ? TextButtonVariant.Default : _c,\n      _d = _a.size,\n      size = _d === void 0 ? 'medium' : _d,\n      _e = _a.iconPosition,\n      iconPosition = _e === void 0 ? ButtonIconPosition.Left : _e,\n      buttonRef = _a.buttonRef,\n      children = _a.children,\n      icon = _a.icon,\n      allCaps = _a.allCaps,\n      elemProps = __rest(_a, [\"theme\", \"variant\", \"size\", \"iconPosition\", \"buttonRef\", \"children\", \"icon\", \"allCaps\"]);\n\n  var allContainerStyles = allCaps ? __assign(__assign(__assign(__assign({}, containerStyles), type.variant.caps), type.variant.button), {\n    fontSize: size === 'medium' ? type.body.fontSize : undefined,\n    letterSpacing: '.5px'\n  }) : __assign(__assign({}, containerStyles), {\n    fontSize: size === 'medium' ? type.body.fontSize : undefined\n  });\n  return React.createElement(ButtonContainer, __assign({\n    colors: getTextButtonColors(variant, theme),\n    ref: buttonRef,\n    size: size,\n    extraStyles: allContainerStyles\n  }, elemProps), icon && iconPosition === ButtonIconPosition.Left && React.createElement(ButtonLabelIcon, {\n    size: size,\n    iconPosition: iconPosition,\n    icon: icon\n  }), React.createElement(ButtonLabel, {\n    className: \"wdc-text-button-label\"\n  }, children), icon && iconPosition === ButtonIconPosition.Right && React.createElement(ButtonLabelIcon, {\n    size: size,\n    iconPosition: iconPosition,\n    icon: icon\n  }));\n};\n\nTextButton.IconPosition = ButtonIconPosition;\nTextButton.Variant = TextButtonVariant;\nTextButton.Size = {\n  Small: 'small',\n  Medium: 'medium'\n};\nexport default TextButton;","map":null,"metadata":{},"sourceType":"module"}