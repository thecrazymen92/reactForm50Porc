var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
function getLast(items) {
    if (items.length) {
        return items[items.length - 1];
    }
    return null;
}
export function getValue(index, length) {
    var _a = stack.zIndex, min = _a.min, max = _a.max;
    if (length <= max - min) {
        return index + min;
    }
    return Math.max(min, max - (length - index) + 1);
}
function find(items, predicate, thisArg) {
    var length = items.length;
    for (var i = 0; i < length; i++) {
        if (predicate(items[i], i, items)) {
            return items[i];
        }
    }
    return;
}
function setZIndexOfElements(elements) {
    var length = elements.length;
    elements.forEach(function (element, index) {
        element.style.zIndex = String(getValue(index, length));
    });
}
function getOwnerPopup(element, items) {
    var parentEl = element;
    do {
        var owner = find(items, function (el) { return el.element === parentEl; });
        if (owner) {
            return owner.element;
        }
    } while ((parentEl = parentEl.parentElement));
    return;
}
function getChildPopups(item, items) {
    var owners = items
        .filter(function (i) { return i.owner; })
        .map(function (i) { return ({ element: i.element, parent: getOwnerPopup(i.owner, items) }); })
        .filter(function (i) { return i.parent === item.element; });
    return owners;
}
function get(obj, path) {
    var parts = path.split('.');
    var first = parts.splice(0, 1)[0];
    if (parts.length && obj[first]) {
        return get(obj[first], parts.join('.'));
    }
    else {
        return obj[first];
    }
}
function set(obj, path, value) {
    var parts = path.split('.');
    var first = parts.splice(0, 1)[0];
    if (parts.length) {
        if (obj[first] === undefined) {
            obj[first] = {};
        }
        set(obj[first], parts.join('.'), value);
    }
    else {
        obj[first] = value;
    }
    return value;
}
if (typeof window !== 'undefined') {
    window.workday = window.workday || {};
}
var getFromWindow = function (path) {
    if (typeof window !== 'undefined') {
        return get(window, path);
    }
    return undefined;
};
var setToWindow = function (path, value) {
    if (typeof window !== 'undefined') {
        set(window, path, value);
    }
};
var stack = getFromWindow('workday.__popupStack') || {
    description: 'Global popup stack from @workday/canvas-kit-popup-stack',
    items: [],
    zIndex: { min: 30, max: 50, getValue: getValue },
    _adapter: {},
};
setToWindow('workday.__popupStack', stack);
export var PopupStack = {
    createContainer: function () {
        var _a;
        if ((_a = stack._adapter) === null || _a === void 0 ? void 0 : _a.createContainer) {
            return stack._adapter.createContainer();
        }
        var div = document.createElement('div');
        div.style.position = 'relative';
        return div;
    },
    add: function (item) {
        var _a;
        if ((_a = stack._adapter) === null || _a === void 0 ? void 0 : _a.add) {
            stack._adapter.add(item);
            return;
        }
        stack.items.push(item);
        document.body.appendChild(item.element);
        setZIndexOfElements(PopupStack.getElements());
    },
    remove: function (element) {
        var _a;
        if ((_a = stack._adapter) === null || _a === void 0 ? void 0 : _a.remove) {
            stack._adapter.remove(element);
            return;
        }
        stack.items = stack.items.filter(function (item) { return item.element !== element; });
        document.body.removeChild(element);
        setZIndexOfElements(PopupStack.getElements());
    },
    isTopmost: function (element) {
        var _a;
        if ((_a = stack._adapter) === null || _a === void 0 ? void 0 : _a.isTopmost) {
            return stack._adapter.isTopmost(element);
        }
        var last = getLast(stack.items);
        if (last) {
            return last.element === element;
        }
        return false;
    },
    getElements: function () {
        var _a;
        if ((_a = stack._adapter) === null || _a === void 0 ? void 0 : _a.getElements) {
            return stack._adapter.getElements();
        }
        return stack.items.map(function (i) { return i.element; });
    },
    bringToTop: function (element) {
        var _a;
        if ((_a = stack._adapter) === null || _a === void 0 ? void 0 : _a.bringToTop) {
            stack._adapter.bringToTop(element);
            return;
        }
        var item = find(stack.items, function (i) { return i.element === element; });
        if (item) {
            stack.items = __spreadArrays(stack.items.filter(function (i) { return i !== item; }), [item]);
            getChildPopups(item, stack.items).forEach(function (popup) {
                PopupStack.bringToTop(popup.element);
            });
            setZIndexOfElements(PopupStack.getElements());
        }
        else {
            var e = new Error();
            console.warn('Could not find item', e.stack);
        }
    },
    contains: function (element, eventTarget) {
        var _a, _b;
        if ((_a = stack._adapter) === null || _a === void 0 ? void 0 : _a.contains) {
            return stack._adapter.contains(element, eventTarget);
        }
        var item = find(stack.items, function (i) { return i.element === element; });
        if (item) {
            return (eventTarget === item.owner || ((_b = item.owner) === null || _b === void 0 ? void 0 : _b.contains(eventTarget)) ||
                element.contains(eventTarget));
        }
        return false;
    },
};
export function resetStack() {
    stack.items = [];
}
export var createAdapter = function (adapter) {
    stack._adapter = adapter;
};
