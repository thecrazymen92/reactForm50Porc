var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx } from '@emotion/core';
import { colors, spacing, borderRadius } from '@workday/canvas-kit-react-core';
import { focusRing, useTheme } from '@workday/canvas-kit-react-common';
import { SystemIcon } from '@workday/canvas-kit-react-icon';
import { ButtonContainer } from './parts';
import { chevronDownSmallIcon } from '@workday/canvas-system-icons-web';
var containerStyles = {
    padding: spacing.zero,
    minWidth: spacing.l,
    width: 'auto',
    height: spacing.l,
    borderRadius: borderRadius.m,
    '& .wd-icon': {
        display: 'inline-block',
        verticalAlign: 'middle',
        width: 20,
        height: 20,
    },
    '& .wdc-toolbar-dropdown-btn-arrow': {
        margin: '0 2px 0 0',
    },
    '& .wdc-toolbar-dropdown-btn-custom-icon': {
        marginLeft: "" + spacing.xxxs,
        marginRight: 0,
        width: 18,
    },
};
var ToolbarDropdownButton = function (_a) {
    var _b = _a.theme, theme = _b === void 0 ? useTheme() : _b, buttonRef = _a.buttonRef, iconArialabel = _a["aria-label"], icon = _a.icon, children = _a.children, elemProps = __rest(_a, ["theme", "buttonRef", 'aria-label', "icon", "children"]);
    return (jsx(ButtonContainer, __assign({ colors: getToolbarDropdownButtonColors(theme), ref: buttonRef, extraStyles: containerStyles, "aria-label": iconArialabel }, elemProps),
        icon ? (jsx(SystemIcon, { className: 'wdc-toolbar-dropdown-btn-custom-icon', icon: icon })) : (children),
        jsx(SystemIcon, { className: 'wdc-toolbar-dropdown-btn-arrow', icon: chevronDownSmallIcon })));
};
export default ToolbarDropdownButton;
var getToolbarDropdownButtonColors = function (theme) {
    return {
        default: {
            icon: colors.licorice200,
        },
        hover: {
            icon: colors.licorice500,
            background: colors.soap300,
        },
        active: {
            icon: colors.licorice500,
            background: colors.soap500,
        },
        focus: {
            icon: colors.licorice200,
            focusRing: focusRing({ width: 2, separation: 0 }, theme),
            background: 'transparent',
        },
        disabled: {
            icon: colors.soap600,
            background: 'transparent',
        },
    };
};
