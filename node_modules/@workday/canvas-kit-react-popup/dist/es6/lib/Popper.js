var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import * as PopperJS from '@popperjs/core';
import { usePopupStack } from '../';
export var Popper = React.forwardRef(function (_a, forwardRef) {
    var _b = _a.portal, portal = _b === void 0 ? true : _b, _c = _a.open, open = _c === void 0 ? true : _c, elemProps = __rest(_a, ["portal", "open"]);
    var localRef = React.useRef(null);
    var ref = (forwardRef || localRef);
    if (!open) {
        return null;
    }
    return React.createElement(OpenPopper, __assign({ ref: ref, portal: portal }, elemProps));
});
var getElementFromRefOrElement = function (input) {
    if (input === null) {
        return undefined;
    }
    else if ('current' in input) {
        return input.current || undefined;
    }
    else {
        return input;
    }
};
var createSetPlacementModifier = function (setPlacement) {
    return {
        name: 'setPlacement',
        enabled: true,
        phase: 'main',
        fn: function (_a) {
            var state = _a.state;
            setPlacement(state.placement);
        },
    };
};
var defaultPopperOptions = {};
var OpenPopper = React.forwardRef(function (_a, forwardRef) {
    var anchorElement = _a.anchorElement, getAnchorClientRect = _a.getAnchorClientRect, _b = _a.popperOptions, popperOptions = _b === void 0 ? defaultPopperOptions : _b, _c = _a.placement, popperPlacement = _c === void 0 ? 'bottom' : _c, children = _a.children, portal = _a.portal, containerElement = _a.containerElement, elemProps = __rest(_a, ["anchorElement", "getAnchorClientRect", "popperOptions", "placement", "children", "portal", "containerElement"]);
    var firstRender = React.useRef(true);
    var popperInstance = React.useRef();
    var _d = React.useState(popperPlacement), placement = _d[0], setPlacement = _d[1];
    var stackRef = usePopupStack(forwardRef, anchorElement);
    React.useLayoutEffect(function () {
        var anchorEl = getAnchorClientRect
            ? { getBoundingClientRect: getAnchorClientRect }
            : getElementFromRefOrElement(anchorElement !== null && anchorElement !== void 0 ? anchorElement : null);
        if (!anchorEl) {
            console.warn("Popper: neither anchorElement or getAnchorClientRect was defined. A valid anchorElement or getAnchorClientRect callback must be provided to render a Popper");
            return undefined;
        }
        if (stackRef.current) {
            popperInstance.current = PopperJS.createPopper(anchorEl, stackRef.current, __assign(__assign({ placement: popperPlacement }, popperOptions), { modifiers: __spreadArrays((popperOptions.modifiers || []), [createSetPlacementModifier(setPlacement)]) }));
            return function () {
                var _a;
                (_a = popperInstance.current) === null || _a === void 0 ? void 0 : _a.destroy();
            };
        }
        return undefined;
    }, [anchorElement, getAnchorClientRect, stackRef]);
    React.useLayoutEffect(function () {
        var _a;
        if (!firstRender.current) {
            (_a = popperInstance.current) === null || _a === void 0 ? void 0 : _a.setOptions(__assign(__assign({ placement: popperPlacement }, popperOptions), { modifiers: __spreadArrays((popperOptions.modifiers || []), [createSetPlacementModifier(setPlacement)]) }));
        }
        firstRender.current = false;
    }, [popperOptions, popperPlacement]);
    var contents = (React.createElement("div", __assign({}, elemProps), isRenderProp(children) ? children({ placement: placement }) : children));
    if (!portal) {
        return contents;
    }
    return ReactDOM.createPortal(contents, containerElement || stackRef.current);
});
function isRenderProp(children) {
    if (typeof children === 'function') {
        return true;
    }
    return false;
}
