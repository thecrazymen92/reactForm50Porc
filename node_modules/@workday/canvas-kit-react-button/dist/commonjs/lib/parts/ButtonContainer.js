"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var is_prop_valid_1 = __importDefault(require("@emotion/is-prop-valid"));
var canvas_kit_labs_react_core_1 = require("@workday/canvas-kit-labs-react-core");
var canvas_kit_react_core_1 = require("@workday/canvas-kit-react-core");
var canvas_kit_react_common_1 = require("@workday/canvas-kit-react-common");
var ButtonLabelData_1 = require("./ButtonLabelData");
function getIconColorSelectors(_a, color, fill) {
    var themePrimary = _a.canvas.palette.primary;
    return {
        '&:focus span, &:hover span, & span': {
            '.wd-icon-fill, .wd-icon-accent, .wd-icon-accent2': {
                fill: color,
            },
            '.wd-icon-background': {
                fill: fill ? color : undefined,
            },
            '.wd-icon-background ~ .wd-icon-accent, .wd-icon-background ~ .wd-icon-accent2': {
                fill: fill
                    ? color === themePrimary.contrast
                        ? themePrimary.main
                        : themePrimary.contrast
                    : color,
            },
        },
    };
}
exports.ButtonContainer = canvas_kit_react_common_1.styled('button', {
    shouldForwardProp: function (prop) { return is_prop_valid_1.default(prop) && prop !== 'size'; },
})(__assign(__assign(__assign({}, canvas_kit_labs_react_core_1.type.body2), canvas_kit_labs_react_core_1.type.variant.button), { lineHeight: 'normal', boxSizing: 'border-box', display: 'inline-flex', alignItems: 'center', justifyContent: 'center', background: 'none', borderRadius: canvas_kit_react_core_1.borderRadius.circle, boxShadow: 'none', position: 'relative', cursor: 'pointer', outline: 'none', verticalAlign: 'middle', border: '2px solid transparent', overflow: 'hidden', whiteSpace: 'nowrap', WebkitFontSmoothing: 'antialiased', MozOsxFontSmoothing: 'grayscale', transition: 'box-shadow 120ms linear, border 120ms linear, background-color 120ms linear, color 120ms linear', '&:hover:active': { transitionDuration: '40ms' }, '&:disabled, &:disabled:active': { cursor: 'default', boxShadow: 'none' }, '& > *:first-of-type': {
        marginLeft: 0,
    }, '& > *:last-of-type': {
        marginRight: 0,
    } }), function (_a) {
    var size = _a.size;
    switch (size) {
        case 'large':
            return {
                fontSize: canvas_kit_labs_react_core_1.type.body.fontSize,
                minWidth: '112px',
                height: '48px',
                padding: "0 " + canvas_kit_react_core_1.spacing.l,
                '& > * ': {
                    margin: "0 " + canvas_kit_react_core_1.spacingNumbers.xs / 2 + "px",
                },
            };
        case 'medium':
        default:
            return {
                minWidth: '96px',
                height: canvas_kit_react_core_1.spacing.xl,
                padding: "0 " + canvas_kit_react_core_1.spacing.m,
                '& > * ': {
                    margin: "0 " + canvas_kit_react_core_1.spacingNumbers.xxs / 2 + "px",
                },
            };
        case 'small':
            return {
                minWidth: '80px',
                height: canvas_kit_react_core_1.spacing.l,
                padding: "0 " + canvas_kit_react_core_1.spacing.s,
                '& > * ': {
                    margin: "0 " + canvas_kit_react_core_1.spacingNumbers.xxxs / 2 + "px",
                },
            };
    }
}, function (_a) {
    var grow = _a.grow;
    return grow && { width: '100%', maxWidth: '100%' };
}, function (_a) {
    var _b, _c, _d, _e, _f;
    var colors = _a.colors, fillIcon = _a.fillIcon, theme = _a.theme;
    if (!colors) {
        return;
    }
    var baseStyles = __assign(__assign({ backgroundColor: colors.default.background, borderColor: colors.default.border, color: colors.default.label }, (colors.default.icon && __assign({ '.wd-icon-fill, .wd-icon-accent, .wd-icon-accent2, .wd-icon-background': {
            transition: 'fill 120ms ease-in',
        } }, getIconColorSelectors(theme, colors.default.icon, fillIcon)))), (colors.default.labelData && (_b = {},
        _b['.' + ButtonLabelData_1.buttonLabelDataClassName] = {
            color: colors.default.labelData,
        },
        _b)));
    var hoverStyles = {
        '&:hover': __assign(__assign({ backgroundColor: colors.hover.background, borderColor: colors.hover.border, color: colors.hover.label }, (colors.hover.labelData && (_c = {},
            _c['.' + ButtonLabelData_1.buttonLabelDataClassName] = {
                transition: 'color 120ms ease-in',
                color: colors.hover.labelData,
            },
            _c))), (colors.hover.icon && getIconColorSelectors(theme, colors.hover.icon, fillIcon))),
    };
    var activeStyles = {
        '&:active, &:focus:active, &:hover:active': __assign(__assign({ backgroundColor: colors.active.background, borderColor: colors.active.border, color: colors.active.label }, (colors.active.labelData && (_d = {},
            _d['.' + ButtonLabelData_1.buttonLabelDataClassName] = {
                color: colors.active.labelData,
            },
            _d))), (colors.active.icon && getIconColorSelectors(theme, colors.active.icon, fillIcon))),
    };
    return __assign(__assign(__assign(__assign(__assign(__assign({}, baseStyles), { '&:focus': __assign(__assign(__assign({ backgroundColor: colors.focus.background, borderColor: colors.focus.border, color: colors.focus.label }, (colors.focus.focusRing || canvas_kit_react_common_1.focusRing({ separation: 2 }, theme))), (colors.focus.labelData && (_e = {},
            _e['.' + ButtonLabelData_1.buttonLabelDataClassName] = {
                color: colors.focus.labelData,
            },
            _e))), (colors.focus.icon && getIconColorSelectors(theme, colors.focus.icon, fillIcon))) }), activeStyles), hoverStyles), { '&:disabled, &:active:disabled, &:focus:disabled, &:hover:disabled': __assign(__assign({ backgroundColor: colors.disabled.background, borderColor: colors.disabled.border, color: colors.disabled.label }, (colors.disabled.icon && getIconColorSelectors(theme, colors.disabled.icon, fillIcon))), (colors.disabled.labelData && (_f = {},
            _f['.' + ButtonLabelData_1.buttonLabelDataClassName] = {
                color: colors.disabled.labelData,
            },
            _f))) }), canvas_kit_react_common_1.mouseFocusBehavior({
        '&:focus': __assign(__assign(__assign(__assign({}, baseStyles), { outline: 'none', boxShadow: 'none', animation: 'none' }), hoverStyles), activeStyles),
    }));
}, function (_a) {
    var extraStyles = _a.extraStyles;
    return extraStyles;
});
