var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { typeColors } from '@workday/canvas-colors-web';
import { type, fontFamily } from '@workday/canvas-kit-react-core';
var hierarchy = {
    brand1: {
        fontSize: 56,
        lineHeight: 1.3,
        fontWeight: 700,
        color: typeColors.heading,
    },
    brand2: {
        fontSize: 48,
        lineHeight: 1.3,
        fontWeight: 700,
        color: typeColors.heading,
    },
    h1: {
        fontSize: 40,
        lineHeight: 1.3,
        fontWeight: 500,
        color: typeColors.heading,
    },
    h2: {
        fontSize: 32,
        lineHeight: 1.3,
        fontWeight: 700,
        color: typeColors.heading,
    },
    h3: {
        fontSize: 24,
        lineHeight: 1.3,
        fontWeight: 700,
        color: typeColors.heading,
    },
    h4: {
        fontSize: 20,
        lineHeight: 1.3,
        fontWeight: 700,
        color: typeColors.heading,
    },
    h5: {
        fontSize: 20,
        lineHeight: 1.3,
        fontWeight: 400,
        color: typeColors.heading,
    },
    body: {
        fontSize: 16,
        lineHeight: 1.5,
        fontWeight: 400,
        color: typeColors.body,
    },
    body2: {
        fontSize: 14,
        lineHeight: 1.5,
        fontWeight: 400,
        color: typeColors.body,
    },
    small: {
        fontSize: 13,
        lineHeight: 1.5,
        fontWeight: 400,
        color: typeColors.body,
    },
};
Object.keys(hierarchy).forEach(function (key) {
    hierarchy[key] = __assign(__assign({}, hierarchy[key]), { fontFamily: fontFamily });
});
var updatedVariants = {
    button: {
        fontWeight: 600,
    },
    caps: {
        fontWeight: 500,
        letterSpacing: 0.5,
        textTransform: 'uppercase',
    },
};
export default __assign(__assign({}, hierarchy), { variant: __assign(__assign({}, type.variant), updatedVariants) });
