var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import get from 'lodash/get';
import { default as colors, typeColors, statusColors } from '@workday/canvas-colors-web';
import { borderRadius } from './radius';
var inheritFont = typeof window !== 'undefined' && get(window, 'window.workday.canvas.inheritFontFamily');
export var fontFamily = inheritFont
    ? 'inherit'
    : '"Roboto", "Helvetica Neue", "Helvetica", Arial, sans-serif';
export var monoFontFamily = '"Roboto Mono", "Courier New", Courier, monospace';
var hierarchy = {
    dataViz1: {
        fontSize: '56px',
        lineHeight: '68px',
        fontWeight: 300,
        color: typeColors.heading,
    },
    dataViz2: {
        fontSize: '34px',
        lineHeight: '40px',
        fontWeight: 300,
        color: typeColors.heading,
    },
    h1: {
        fontSize: '28px',
        lineHeight: '36px',
        fontWeight: 500,
        color: typeColors.heading,
    },
    h2: {
        fontSize: '24px',
        lineHeight: '32px',
        fontWeight: 700,
        color: typeColors.heading,
    },
    h3: {
        fontSize: '20px',
        lineHeight: '28px',
        fontWeight: 700,
        color: typeColors.heading,
    },
    h4: {
        fontSize: '16px',
        lineHeight: '24px',
        fontWeight: 700,
        color: typeColors.heading,
    },
    h5: {
        fontSize: '16px',
        lineHeight: '24px',
        fontWeight: 400,
        color: typeColors.heading,
    },
    body: {
        fontSize: '14px',
        lineHeight: '20px',
        fontWeight: 400,
        color: typeColors.body,
    },
    body2: {
        fontSize: '13px',
        lineHeight: '20px',
        fontWeight: 400,
        color: typeColors.body,
    },
    small: {
        fontSize: '12px',
        lineHeight: '16px',
        fontWeight: 400,
        color: typeColors.body,
    },
};
Object.keys(hierarchy).forEach(function (key) {
    hierarchy[key] = __assign(__assign({}, hierarchy[key]), { fontFamily: fontFamily });
});
var variants = {
    label: {
        fontWeight: 500,
    },
    button: {
        fontWeight: 500,
    },
    caps: {
        fontWeight: 700,
        textTransform: 'uppercase',
    },
    hint: {
        color: typeColors.hint,
    },
    error: {
        color: statusColors.error,
    },
    inverse: {
        color: typeColors.inverse,
    },
    mono: {
        fontFamily: monoFontFamily,
    },
    link: {
        textDecoration: 'underline',
        color: colors.blueberry400,
        cursor: 'pointer',
        borderRadius: borderRadius.s,
        display: 'inline-block',
        padding: '0 2px',
        margin: '0 -2px',
        transition: 'color 0.15s,background-color 0.15s',
        '&:hover': {
            color: colors.blueberry500,
            background: colors.soap200,
        },
        '&:focus': {
            boxShadow: "0 0 0 2px " + colors.blueberry400,
            outline: 'none',
        },
        '&:active': {
            color: colors.blueberry600,
            background: colors.soap300,
        },
    },
};
var type = __assign(__assign({}, hierarchy), { variant: __assign({}, variants) });
export default type;
