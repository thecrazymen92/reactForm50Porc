"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var v4_1 = __importDefault(require("uuid/v4"));
var canvas_kit_react_common_1 = require("@workday/canvas-kit-react-common");
var canvas_kit_react_core_1 = require("@workday/canvas-kit-react-core");
var canvas_system_icons_web_1 = require("@workday/canvas-system-icons-web");
var canvas_kit_react_icon_1 = require("@workday/canvas-kit-react-icon");
var SelectMenu_1 = __importDefault(require("./SelectMenu"));
var SelectOption_1 = __importDefault(require("./SelectOption"));
var scrolling_1 = require("./scrolling");
var utils_1 = require("./utils");
exports.buttonBorderWidth = 1;
exports.buttonDefaultWidth = 280;
var menuIconSize = 24;
var buttonPadding = canvas_kit_react_core_1.spacingNumbers.xxs - exports.buttonBorderWidth;
var SelectButton = canvas_kit_react_common_1.styled('button')(__assign(__assign({}, canvas_kit_react_core_1.type.body), { border: exports.buttonBorderWidth + "px solid " + canvas_kit_react_core_1.inputColors.border, cursor: 'default', display: 'block', backgroundColor: canvas_kit_react_core_1.inputColors.background, borderRadius: canvas_kit_react_core_1.borderRadius.m, boxSizing: 'border-box', height: canvas_kit_react_core_1.spacing.xl, outline: 'none', overflow: 'hidden', padding: buttonPadding, paddingRight: canvas_kit_react_core_1.spacingNumbers.xxs + menuIconSize + buttonPadding, textAlign: 'left', textOverflow: 'ellipsis', transition: '0.2s box-shadow, 0.2s border-color', whiteSpace: 'nowrap', width: exports.buttonDefaultWidth, '&::placeholder': {
        color: canvas_kit_react_core_1.inputColors.placeholder,
    }, '&:disabled': {
        backgroundColor: canvas_kit_react_core_1.inputColors.disabled.background,
        borderColor: canvas_kit_react_core_1.inputColors.disabled.border,
        color: canvas_kit_react_core_1.inputColors.disabled.text,
        '&::placeholder': {
            color: canvas_kit_react_core_1.inputColors.disabled.text,
        },
    } }), function (_a) {
    var error = _a.error, menuVisibility = _a.menuVisibility, theme = _a.theme;
    var themedFocusOutlineColor = theme.canvas.palette.common.focusOutline;
    var buttonFocusStyles = {
        borderColor: themedFocusOutlineColor,
        boxShadow: "inset 0 0 0 1px " + themedFocusOutlineColor,
    };
    if (error === undefined) {
        return menuVisibility === 'closed' || menuVisibility === 'closing'
            ? {
                '&:focus:not([disabled])': __assign({}, buttonFocusStyles),
                '&:hover:not([disabled]):not(:focus)': {
                    borderColor: canvas_kit_react_core_1.inputColors.hoverBorder,
                },
            }
            : __assign({}, buttonFocusStyles);
    }
    return __assign({}, canvas_kit_react_common_1.errorRing(error, theme));
}, function (_a) {
    var grow = _a.grow;
    return grow && {
        width: '100%',
    };
});
var SelectMenuIcon = canvas_kit_react_common_1.styled(canvas_kit_react_icon_1.SystemIcon)({
    position: 'absolute',
    top: canvas_kit_react_core_1.spacing.xxxs,
    right: canvas_kit_react_core_1.spacing.xxxs,
    padding: canvas_kit_react_core_1.spacing.xxxs,
    pointerEvents: 'none',
    '& path': {
        transition: '100ms fill',
    },
});
var SelectInput = canvas_kit_react_common_1.styled('input')({
    display: 'none',
});
var SelectWrapper = canvas_kit_react_common_1.styled('div')({
    position: 'relative',
}, function (_a) {
    var grow = _a.grow;
    return ({
        display: grow ? 'block' : 'inline-block',
    });
}, function (_a) {
    var disabled = _a.disabled;
    return ({
        '&:hover .menu-icon path': {
            fill: disabled ? undefined : canvas_kit_react_core_1.colors.licorice500,
        },
    });
});
var defaultRenderOption = function (option) {
    return react_1.default.createElement("div", null, option.label);
};
var SelectBase = function (_a) {
    var ariaLabelledBy = _a["aria-labelledby"], ariaRequired = _a["aria-required"], buttonRef = _a.buttonRef, disabled = _a.disabled, error = _a.error, _b = _a.focusedOptionIndex, focusedOptionIndex = _b === void 0 ? 0 : _b, grow = _a.grow, inputRef = _a.inputRef, _c = _a.menuPlacement, menuPlacement = _c === void 0 ? 'bottom' : _c, menuRef = _a.menuRef, _d = _a.menuVisibility, menuVisibility = _d === void 0 ? 'closed' : _d, onChange = _a.onChange, onKeyDown = _a.onKeyDown, onMenuBlur = _a.onMenuBlur, onMenuCloseOnEscape = _a.onMenuCloseOnEscape, onOptionSelection = _a.onOptionSelection, options = _a.options, _e = _a.renderOption, renderOption = _e === void 0 ? defaultRenderOption : _e, required = _a.required, _f = _a.shouldMenuAutoFlip, shouldMenuAutoFlip = _f === void 0 ? true : _f, _g = _a.shouldMenuAutoFocus, shouldMenuAutoFocus = _g === void 0 ? true : _g, value = _a.value, elemProps = __rest(_a, ['aria-labelledby', 'aria-required', "buttonRef", "disabled", "error", "focusedOptionIndex", "grow", "inputRef", "menuPlacement", "menuRef", "menuVisibility", "onChange", "onKeyDown", "onMenuBlur", "onMenuCloseOnEscape", "onOptionSelection", "options", "renderOption", "required", "shouldMenuAutoFlip", "shouldMenuAutoFocus", "value"]);
    var focusedOptionRef = react_1.default.useRef(null);
    var menuId = react_1.default.useState(function () { return "a" + v4_1.default(); })[0];
    var renderOptions = function (renderOption) {
        var selectedOptionIndex = utils_1.getCorrectedIndexByValue(options, value);
        return options.map(function (option, index) {
            var optionProps = __assign({ 'aria-disabled': option.disabled ? true : undefined, 'aria-selected': selectedOptionIndex === index ? true : undefined, error: error, focused: focusedOptionIndex === index, id: option.id, interactive: menuVisibility === 'opening' || menuVisibility === 'opened', key: option.id, optionRef: focusedOptionIndex === index ? focusedOptionRef : undefined, value: option.value }, (onOptionSelection
                ? {
                    onClick: function (event) {
                        event.preventDefault();
                        onOptionSelection(index);
                    },
                }
                : {}));
            var normalizedOption = __assign(__assign({}, option), { focused: optionProps.focused, selected: !!optionProps['aria-selected'] });
            return react_1.default.createElement(SelectOption_1.default, __assign({}, optionProps), renderOption(normalizedOption));
        });
    };
    react_1.useLayoutEffect(function () {
        var focusedOption = focusedOptionRef.current;
        if (focusedOption) {
            var animateId_1 = requestAnimationFrame(function () {
                scrolling_1.scrollIntoViewIfNeeded(focusedOption, false);
            });
            return function () {
                cancelAnimationFrame(animateId_1);
            };
        }
        return undefined;
    }, [focusedOptionIndex]);
    react_1.useLayoutEffect(function () {
        var focusedOption = focusedOptionRef.current;
        if (focusedOption && (menuVisibility === 'opening' || menuVisibility === 'opened')) {
            var animateId_2 = requestAnimationFrame(function () {
                scrolling_1.scrollIntoViewIfNeeded(focusedOption, true);
            });
            return function () {
                cancelAnimationFrame(animateId_2);
            };
        }
        return undefined;
    }, [menuVisibility]);
    var hasOptions = options.length > 0;
    var selectedOption = hasOptions ? options[utils_1.getCorrectedIndexByValue(options, value)] : null;
    var selectedOptionLabel = selectedOption ? selectedOption.label : '';
    var selectedOptionValue = selectedOption ? selectedOption.value : '';
    return (react_1.default.createElement(SelectWrapper, { grow: grow, disabled: disabled },
        react_1.default.createElement(SelectButton, __assign({ "aria-expanded": menuVisibility !== 'closed' ? 'true' : undefined, "aria-haspopup": "listbox", "aria-controls": menuVisibility !== 'closed' ? menuId : undefined, disabled: disabled, error: error, grow: grow, menuVisibility: menuVisibility, onKeyDown: onKeyDown, onKeyUp: function (e) {
                e.preventDefault();
            }, ref: buttonRef, type: "button", value: selectedOptionValue }, elemProps), selectedOptionLabel),
        react_1.default.createElement(SelectInput, { onChange: onChange, ref: inputRef, type: "text", value: selectedOptionValue }),
        hasOptions && menuVisibility !== 'closed' && (react_1.default.createElement(SelectMenu_1.default, { "aria-activedescendant": options[focusedOptionIndex].id, "aria-labelledby": ariaLabelledBy, "aria-required": ariaRequired || required ? true : undefined, buttonRef: buttonRef, id: menuId, error: error, menuRef: menuRef, onBlur: onMenuBlur, onKeyDown: onKeyDown, onCloseOnEscape: onMenuCloseOnEscape, placement: menuPlacement, shouldAutoFlip: shouldMenuAutoFlip, shouldAutoFocus: shouldMenuAutoFocus, visibility: menuVisibility }, renderOptions(renderOption))),
        react_1.default.createElement(SelectMenuIcon, { className: "menu-icon", icon: canvas_system_icons_web_1.caretDownSmallIcon, color: disabled ? canvas_kit_react_core_1.colors.licorice100 : canvas_kit_react_core_1.colors.licorice200, colorHover: disabled ? canvas_kit_react_core_1.colors.licorice100 : canvas_kit_react_core_1.colors.licorice500, size: menuIconSize })));
};
exports.default = SelectBase;
