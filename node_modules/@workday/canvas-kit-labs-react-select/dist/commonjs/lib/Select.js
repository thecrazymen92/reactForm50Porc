"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var canvas_kit_react_common_1 = require("@workday/canvas-kit-react-common");
var SelectMenu_1 = require("./SelectMenu");
var SelectBase_1 = __importDefault(require("./SelectBase"));
var utils_1 = require("./utils");
var v4_1 = __importDefault(require("uuid/v4"));
var Select = (function (_super) {
    __extends(Select, _super);
    function Select(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            focusedOptionIndex: 0,
            menuVisibility: 'closed',
        };
        _this.buttonRef = React.createRef();
        _this.inputRef = React.createRef();
        _this.menuRef = React.createRef();
        _this.keysSoFar = '';
        _this.clearKeysSoFarTimeout = 500;
        _this.normalizedOptions = [];
        _this.areOptionsDefined = function () {
            var options = _this.props.options;
            if (!options || options.length === 0) {
                return false;
            }
            return true;
        };
        _this.setNormalizedOptions = function () {
            var options = _this.props.options;
            if (!_this.areOptionsDefined()) {
                return;
            }
            _this.normalizedOptions = options.map(function (option) {
                var data = {};
                var disabled, id, label, value;
                if (typeof option === 'string') {
                    disabled = false;
                    id = v4_1.default();
                    value = option;
                    label = option;
                }
                else {
                    data = option.data || data;
                    disabled = !!option.disabled;
                    id = option.id || v4_1.default();
                    value = option.value;
                    label = option.label || option.value;
                }
                return {
                    data: data,
                    disabled: disabled,
                    id: id,
                    label: label,
                    value: value,
                };
            });
        };
        _this.getIndexByStartString = function (startIndex, startString, endIndex, ignoreDisabled) {
            if (endIndex === void 0) { endIndex = _this.normalizedOptions.length; }
            if (ignoreDisabled === void 0) { ignoreDisabled = true; }
            for (var i = startIndex; i < endIndex; i++) {
                var label = _this.normalizedOptions[i].label.toLowerCase();
                if (label.indexOf(startString.toLowerCase()) === 0) {
                    if (!ignoreDisabled || (ignoreDisabled && !_this.normalizedOptions[i].disabled)) {
                        return i;
                    }
                }
            }
            return -1;
        };
        _this.focusNextEnabledOption = function (startIndex, direction) {
            if (direction === 0) {
                return;
            }
            var numOptions = _this.normalizedOptions.length;
            var currentIndex = startIndex;
            while (currentIndex >= 0 &&
                currentIndex < numOptions &&
                _this.normalizedOptions[currentIndex].disabled) {
                currentIndex += direction;
            }
            if (currentIndex >= 0 &&
                currentIndex < numOptions &&
                !_this.normalizedOptions[currentIndex].disabled) {
                _this.setState({ focusedOptionIndex: currentIndex });
            }
        };
        _this.updateStateFromValue = function () {
            _this.setState({
                focusedOptionIndex: utils_1.getCorrectedIndexByValue(_this.normalizedOptions, _this.props.value),
            });
        };
        _this.focusButton = function () {
            if (_this.buttonRef.current) {
                _this.buttonRef.current.focus();
            }
        };
        _this.setMenuAnimationTimeout = function (callback) {
            if (_this.menuAnimationTimer) {
                clearTimeout(_this.menuAnimationTimer);
            }
            _this.menuAnimationTimer = setTimeout(callback, SelectMenu_1.menuAnimationDuration);
        };
        _this.openMenu = function () {
            _this.setState({ menuVisibility: 'opening' });
            _this.setMenuAnimationTimeout(function () {
                _this.setState({ menuVisibility: 'opened' });
            });
        };
        _this.closeMenu = function () {
            _this.setState({ menuVisibility: 'closing' });
            _this.setMenuAnimationTimeout(function () {
                _this.setState({
                    focusedOptionIndex: utils_1.getCorrectedIndexByValue(_this.normalizedOptions, _this.props.value),
                    menuVisibility: 'closed',
                });
            });
        };
        _this.toggleMenu = function (open) {
            var menuVisibility = _this.state.menuVisibility;
            if (open) {
                switch (menuVisibility) {
                    case 'closed':
                        _this.setState({ menuVisibility: 'open' }, _this.openMenu);
                        break;
                    case 'close':
                    case 'closing':
                        _this.openMenu();
                        break;
                    default:
                        break;
                }
            }
            else {
                switch (menuVisibility) {
                    case 'opened':
                        _this.setState({ menuVisibility: 'close' }, _this.closeMenu);
                        break;
                    case 'open':
                    case 'opening':
                        _this.closeMenu();
                        break;
                    default:
                        break;
                }
            }
        };
        _this.fireChangeEvent = function (value) {
            if (_this.inputRef && _this.inputRef.current) {
                var nativeInputValue = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(_this.inputRef.current), 'value');
                if (nativeInputValue && nativeInputValue.set) {
                    nativeInputValue.set.call(_this.inputRef.current, value);
                }
                var event_1;
                if (typeof Event === 'function') {
                    event_1 = new Event('change', { bubbles: true });
                }
                else {
                    event_1 = document.createEvent('Event');
                    event_1.initEvent('change', true, true);
                }
                _this.inputRef.current.dispatchEvent(event_1);
            }
        };
        _this.handleKeyboardTypeAhead = function (key, numOptions) {
            if (_this.state.menuVisibility === 'closing') {
                return;
            }
            var start = _this.keysSoFar.length === 0
                ? _this.state.focusedOptionIndex + 1
                : _this.state.focusedOptionIndex;
            start = start === numOptions ? 0 : start;
            _this.keysSoFar += key;
            _this.startClearKeysSoFarTimer();
            var matchIndex;
            matchIndex = _this.getIndexByStartString(start, _this.keysSoFar);
            if (matchIndex === -1) {
                matchIndex = _this.getIndexByStartString(0, _this.keysSoFar, start);
            }
            if (matchIndex > -1) {
                if (_this.state.menuVisibility === 'closed') {
                    _this.fireChangeEvent(_this.normalizedOptions[matchIndex].value);
                }
                else {
                    _this.setState({ focusedOptionIndex: matchIndex });
                }
            }
        };
        _this.startClearKeysSoFarTimer = function () {
            if (_this.clearKeysSoFarTimer) {
                clearTimeout(_this.clearKeysSoFarTimer);
            }
            _this.clearKeysSoFarTimer = setTimeout(function () {
                _this.keysSoFar = '';
            }, _this.clearKeysSoFarTimeout);
        };
        _this.handleMouseDown = function (event) {
            event.preventDefault();
        };
        _this.handleClick = function (event) {
            var menuVisibility = _this.state.menuVisibility;
            switch (menuVisibility) {
                case 'close':
                case 'closing':
                    if (_this.menuRef.current) {
                        _this.menuRef.current.focus();
                    }
                    _this.toggleMenu(true);
                    break;
                case 'closed':
                    _this.toggleMenu(true);
                    break;
                default:
                    _this.focusButton();
                    _this.toggleMenu(false);
                    break;
            }
        };
        _this.handleOptionSelection = function (index) {
            if (_this.normalizedOptions[index].disabled) {
                return;
            }
            _this.toggleMenu(false);
            _this.focusButton();
            _this.fireChangeEvent(_this.normalizedOptions[index].value);
        };
        _this.handleMenuBlur = function (event) {
            _this.toggleMenu(false);
        };
        _this.handleMenuCloseOnKeyPress = function () {
            _this.toggleMenu(false);
            _this.focusButton();
        };
        _this.handleKeyDown = function (event) {
            var options = _this.props.options;
            var numOptions = options.length;
            var _a = _this.state, focusedOptionIndex = _a.focusedOptionIndex, menuVisibility = _a.menuVisibility;
            var isShortcut = false;
            if (event.key.length === 1 && event.key.match(/\S/)) {
                isShortcut = true;
                _this.handleKeyboardTypeAhead(event.key, numOptions);
            }
            else {
                switch (event.key) {
                    case 'ArrowUp':
                    case 'Up':
                    case 'ArrowDown':
                    case 'Down':
                        isShortcut = true;
                        if (menuVisibility === 'closed' || menuVisibility === 'closing') {
                            _this.toggleMenu(true);
                        }
                        else {
                            var direction_1 = event.key === 'ArrowUp' || event.key === 'Up' ? -1 : 1;
                            var startIndex_1 = focusedOptionIndex + direction_1;
                            _this.focusNextEnabledOption(startIndex_1, direction_1);
                        }
                        break;
                    case 'Home':
                    case 'End':
                        isShortcut = true;
                        var direction = event.key === 'Home' ? 1 : -1;
                        var startIndex = event.key === 'Home' ? 0 : numOptions - 1;
                        _this.focusNextEnabledOption(startIndex, direction);
                        break;
                    case 'Tab':
                        if (menuVisibility !== 'closed') {
                            isShortcut = true;
                            _this.handleMenuCloseOnKeyPress();
                        }
                        break;
                    case 'Spacebar':
                    case ' ':
                        isShortcut = true;
                        if (_this.keysSoFar !== '') {
                            _this.handleKeyboardTypeAhead(' ', numOptions);
                        }
                        else if (menuVisibility === 'closed' || menuVisibility === 'closing') {
                            _this.toggleMenu(true);
                        }
                        else {
                            _this.handleOptionSelection(focusedOptionIndex);
                        }
                        break;
                    case 'Enter':
                        isShortcut = true;
                        if (menuVisibility === 'closed' || menuVisibility === 'closing') {
                            _this.toggleMenu(true);
                        }
                        else {
                            _this.handleOptionSelection(focusedOptionIndex);
                        }
                        break;
                    default:
                }
            }
            if (isShortcut) {
                event.stopPropagation();
                event.preventDefault();
            }
        };
        _this.setNormalizedOptions();
        return _this;
    }
    Select.prototype.componentDidMount = function () {
        this.updateStateFromValue();
    };
    Select.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, options = _a.options, value = _a.value;
        if (options !== prevProps.options) {
            this.setNormalizedOptions();
            this.updateStateFromValue();
        }
        if (value !== prevProps.value) {
            this.updateStateFromValue();
        }
    };
    Select.prototype.componentWillUnmount = function () {
        if (this.menuAnimationTimer) {
            clearTimeout(this.menuAnimationTimer);
        }
        if (this.clearKeysSoFarTimer) {
            clearTimeout(this.clearKeysSoFarTimer);
        }
    };
    Select.prototype.render = function () {
        var _a = this.props, value = _a.value, options = _a.options, elemProps = __rest(_a, ["value", "options"]);
        var _b = this.state, focusedOptionIndex = _b.focusedOptionIndex, menuVisibility = _b.menuVisibility;
        var eventHandlers = this.areOptionsDefined()
            ? {
                onClick: this.handleClick,
                onKeyDown: this.handleKeyDown,
                onMenuBlur: this.handleMenuBlur,
                onMenuCloseOnEscape: this.handleMenuCloseOnKeyPress,
                onMouseDown: this.handleMouseDown,
                onOptionSelection: this.handleOptionSelection,
            }
            : {};
        return (React.createElement(SelectBase_1.default, __assign({ buttonRef: this.buttonRef, focusedOptionIndex: focusedOptionIndex, inputRef: this.inputRef, menuRef: this.menuRef, menuVisibility: menuVisibility, options: this.normalizedOptions, value: value }, eventHandlers, elemProps)));
    };
    Select.ErrorType = canvas_kit_react_common_1.ErrorType;
    return Select;
}(React.Component));
Select.ErrorType = canvas_kit_react_common_1.ErrorType;
exports.default = Select;
