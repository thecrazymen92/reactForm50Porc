"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@emotion/core");
var canvas_kit_react_core_1 = __importDefault(require("@workday/canvas-kit-react-core"));
var index_1 = require("../theming/index");
var memoize_1 = __importDefault(require("lodash/memoize"));
function calculateFocusRing(_a) {
    var width = _a.width, separation = _a.separation, animate = _a.animate, inset = _a.inset, innerColor = _a.innerColor, outerColor = _a.outerColor;
    var boxShadow, innerWidth, outerWidth;
    switch (inset) {
        case 'outer':
            innerWidth = width + separation;
            outerWidth = separation;
            boxShadow = "inset 0 0 0 " + outerWidth + "px " + outerColor + ", inset 0 0 0 " + innerWidth + "px " + innerColor;
            break;
        case 'inner':
            innerWidth = separation;
            outerWidth = width;
            boxShadow = "inset 0 0 0 " + innerWidth + "px " + innerColor + ", 0 0 0 " + outerWidth + "px " + outerColor;
            break;
        default:
            innerWidth = separation;
            outerWidth = width + separation;
            boxShadow = "0 0 0 " + innerWidth + "px " + innerColor + ", 0 0 0 " + outerWidth + "px " + outerColor;
            break;
    }
    if (animate) {
        var fadeIn = core_1.keyframes({
            '0%': { boxShadow: boxShadow },
            '100%': { boxShadow: boxShadow },
        });
        return { animation: fadeIn + " 100ms", boxShadow: boxShadow };
    }
    return { boxShadow: boxShadow };
}
exports.memoizedFocusRing = memoize_1.default(calculateFocusRing, function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return JSON.stringify(args);
});
function focusRing(options, theme) {
    if (options === void 0) { options = {}; }
    var _a = options.width, width = _a === void 0 ? 2 : _a, _b = options.separation, separation = _b === void 0 ? 0 : _b, _c = options.animate, animate = _c === void 0 ? true : _c, _d = options.innerColor, innerColor = _d === void 0 ? canvas_kit_react_core_1.default.colors.frenchVanilla100 : _d, _e = options.outerColor, outerColor = _e === void 0 ? theme && theme.canvas
        ? theme.canvas.palette.common.focusOutline
        : index_1.defaultCanvasTheme.palette.common.focusOutline : _e, _f = options.memoize, memoize = _f === void 0 ? true : _f, inset = options.inset;
    var args = {
        width: width,
        separation: separation,
        innerColor: innerColor,
        outerColor: outerColor,
        animate: animate,
        inset: inset,
    };
    if (memoize) {
        return exports.memoizedFocusRing(args);
    }
    return calculateFocusRing(args);
}
exports.focusRing = focusRing;
