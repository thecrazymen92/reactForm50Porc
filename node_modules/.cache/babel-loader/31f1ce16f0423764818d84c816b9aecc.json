{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { colors, spacing, borderRadius } from '@workday/canvas-kit-react-core';\nimport { focusRing, useTheme } from '@workday/canvas-kit-react-common';\nimport { SystemIcon } from '@workday/canvas-kit-react-icon';\nimport { IconButtonVariant } from './types';\nimport { ButtonContainer } from './parts';\n\nvar IconButton = function IconButton(_a) {\n  var _b;\n\n  var _c = _a.theme,\n      theme = _c === void 0 ? useTheme() : _c,\n      _d = _a.variant,\n      variant = _d === void 0 ? IconButtonVariant.Circle : _d,\n      _e = _a.size,\n      size = _e === void 0 ? 'medium' : _e,\n      buttonRef = _a.buttonRef,\n      onToggleChange = _a.onToggleChange,\n      iconArialabel = _a[\"aria-label\"],\n      icon = _a.icon,\n      toggled = _a.toggled,\n      children = _a.children,\n      elemProps = __rest(_a, [\"theme\", \"variant\", \"size\", \"buttonRef\", \"onToggleChange\", 'aria-label', \"icon\", \"toggled\", \"children\"]);\n\n  var isInitialMount = React.useRef(true);\n  React.useEffect(function () {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      if (toggled && typeof onToggleChange === 'function') {\n        onToggleChange(toggled);\n      }\n    }\n  }, [toggled, onToggleChange]);\n\n  var containerStyles = __assign(__assign({\n    padding: 0,\n    margin: variant === IconButtonVariant.Plain ? '-8px' : undefined,\n    minWidth: size === 'small' ? spacing.l : spacing.xl,\n    width: size === 'small' ? spacing.l : spacing.xl,\n    height: size === 'small' ? spacing.l : spacing.xl\n  }, getIconButtonBorderRadius(variant)), (_b = {}, _b['& .wd-icon'] = {\n    display: 'inline-block',\n    verticalAlign: 'middle',\n    width: size === 'small' ? '20px' : undefined,\n    height: size === 'small' ? '20px' : undefined\n  }, _b));\n\n  return React.createElement(ButtonContainer, __assign({\n    colors: getIconButtonColors(variant, theme, toggled),\n    size: size,\n    ref: buttonRef,\n    fillIcon: toggled,\n    extraStyles: containerStyles,\n    \"aria-pressed\": toggled,\n    \"aria-label\": iconArialabel\n  }, elemProps), icon ? React.createElement(SystemIcon, {\n    icon: icon\n  }) : children);\n};\n\nIconButton.Variant = IconButtonVariant;\nIconButton.Size = {\n  Small: 'small',\n  Medium: 'medium'\n};\nexport default IconButton;\n\nvar getIconButtonBorderRadius = function getIconButtonBorderRadius(variant) {\n  switch (variant) {\n    case IconButtonVariant.Square:\n    case IconButtonVariant.SquareFilled:\n      return {\n        borderRadius: borderRadius.m\n      };\n\n    default:\n      return {\n        borderRadius: borderRadius.circle\n      };\n  }\n};\n\nvar getIconButtonColors = function getIconButtonColors(variant, theme, toggled) {\n  var themePrimary = theme.canvas.palette.primary;\n\n  switch (variant) {\n    case IconButton.Variant.Square:\n    case IconButtonVariant.Circle:\n    default:\n      return {\n        default: {\n          background: toggled ? themePrimary.main : undefined,\n          icon: toggled ? themePrimary.contrast : colors.licorice200\n        },\n        hover: {\n          background: toggled ? themePrimary.dark : colors.soap300,\n          icon: toggled ? themePrimary.contrast : colors.licorice500\n        },\n        active: {\n          background: toggled ? themePrimary.dark : colors.soap500,\n          icon: toggled ? themePrimary.contrast : colors.licorice500\n        },\n        focus: {\n          background: toggled ? themePrimary.main : undefined,\n          icon: toggled ? themePrimary.contrast : colors.licorice500\n        },\n        disabled: {\n          background: toggled ? themePrimary.lightest : 'transparent',\n          icon: toggled ? themePrimary.light : colors.soap600\n        }\n      };\n\n    case IconButtonVariant.SquareFilled:\n    case IconButtonVariant.CircleFilled:\n      return {\n        default: {\n          background: toggled ? themePrimary.main : colors.soap200,\n          icon: toggled ? themePrimary.contrast : colors.licorice200\n        },\n        hover: {\n          background: toggled ? themePrimary.dark : colors.soap400,\n          icon: toggled ? themePrimary.contrast : colors.licorice500\n        },\n        active: {\n          background: toggled ? themePrimary.dark : colors.soap500,\n          icon: toggled ? themePrimary.contrast : colors.licorice500\n        },\n        focus: {\n          background: toggled ? themePrimary.main : colors.soap200,\n          icon: toggled ? themePrimary.contrast : colors.licorice500\n        },\n        disabled: {\n          background: toggled ? themePrimary.lightest : colors.soap100,\n          icon: toggled ? themePrimary.light : colors.soap600\n        }\n      };\n\n    case IconButtonVariant.Plain:\n      return {\n        default: {\n          icon: toggled ? themePrimary.main : colors.licorice200\n        },\n        hover: {\n          icon: toggled ? themePrimary.main : colors.licorice500\n        },\n        active: {\n          icon: toggled ? themePrimary.main : colors.licorice500\n        },\n        focus: {\n          icon: toggled ? themePrimary.main : colors.licorice500,\n          focusRing: focusRing({}, theme)\n        },\n        disabled: {\n          icon: toggled ? themePrimary.light : colors.soap600\n        }\n      };\n\n    case IconButtonVariant.Inverse:\n      return {\n        default: {\n          background: toggled ? themePrimary.contrast : undefined,\n          icon: toggled ? themePrimary.main : themePrimary.contrast\n        },\n        hover: {\n          background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.2)',\n          icon: toggled ? themePrimary.main : themePrimary.contrast\n        },\n        active: {\n          background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.3)',\n          icon: toggled ? themePrimary.main : themePrimary.contrast\n        },\n        focus: {\n          background: toggled ? themePrimary.contrast : undefined,\n          icon: toggled ? themePrimary.main : themePrimary.contrast,\n          focusRing: focusRing({\n            separation: 2,\n            innerColor: 'currentColor',\n            outerColor: themePrimary.contrast\n          }, theme)\n        },\n        disabled: {\n          background: toggled ? 'rgba(255,255,255,0.75)' : 'transparent',\n          icon: toggled ? themePrimary.main : 'rgba(255, 255, 255, 0.75)'\n        }\n      };\n\n    case IconButtonVariant.InverseFilled:\n      return {\n        default: {\n          background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.2)',\n          icon: toggled ? themePrimary.main : themePrimary.contrast\n        },\n        hover: {\n          background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.3)',\n          icon: toggled ? themePrimary.main : themePrimary.contrast\n        },\n        active: {\n          background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.4)',\n          icon: toggled ? themePrimary.main : themePrimary.contrast\n        },\n        focus: {\n          background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.2)',\n          icon: toggled ? themePrimary.main : themePrimary.contrast,\n          focusRing: focusRing({\n            separation: 2,\n            innerColor: 'currentColor',\n            outerColor: themePrimary.contrast\n          }, theme)\n        },\n        disabled: {\n          background: toggled ? 'rgba(255,255,255,0.75)' : 'rgba(0, 0, 0, 0.2)',\n          icon: toggled ? themePrimary.main : 'rgba(255, 255, 255, 0.75)'\n        }\n      };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}