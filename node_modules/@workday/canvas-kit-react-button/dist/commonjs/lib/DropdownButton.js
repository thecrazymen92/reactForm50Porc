"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var canvas_system_icons_web_1 = require("@workday/canvas-system-icons-web");
var canvas_kit_react_common_1 = require("@workday/canvas-kit-react-common");
var types_1 = require("./types");
var parts_1 = require("./parts");
var Button_1 = require("./Button");
var DropdownButton = function (_a) {
    var _b = _a.theme, theme = _b === void 0 ? canvas_kit_react_common_1.useTheme() : _b, _c = _a.variant, variant = _c === void 0 ? types_1.DropdownButtonVariant.Secondary : _c, _d = _a.size, size = _d === void 0 ? 'medium' : _d, buttonRef = _a.buttonRef, children = _a.children, elemProps = __rest(_a, ["theme", "variant", "size", "buttonRef", "children"]);
    return (React.createElement(parts_1.ButtonContainer, __assign({ colors: Button_1.getButtonColors(variant, theme), size: size, ref: buttonRef }, elemProps),
        React.createElement(parts_1.ButtonLabel, null, children),
        React.createElement(parts_1.ButtonLabelIcon, { size: size, icon: canvas_system_icons_web_1.caretDownIcon, iconPosition: types_1.ButtonIconPosition.Right, dropdown: true })));
};
DropdownButton.Variant = types_1.DropdownButtonVariant;
DropdownButton.Size = {
    Medium: 'medium',
    Large: 'large',
};
exports.default = DropdownButton;
