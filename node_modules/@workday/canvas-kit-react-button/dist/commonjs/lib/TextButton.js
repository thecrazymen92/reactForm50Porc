"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var canvas_kit_labs_react_core_1 = require("@workday/canvas-kit-labs-react-core");
var canvas_kit_react_common_1 = require("@workday/canvas-kit-react-common");
var canvas_kit_react_core_1 = require("@workday/canvas-kit-react-core");
var types_1 = require("./types");
var parts_1 = require("./parts");
var getTextButtonColors = function (variant, theme) {
    var themePrimary = theme.canvas.palette.primary;
    switch (variant) {
        case types_1.TextButtonVariant.Default:
        default:
            return {
                default: {
                    icon: themePrimary.main,
                    label: themePrimary.main,
                },
                hover: {
                    background: canvas_kit_react_core_1.colors.soap200,
                    icon: themePrimary.dark,
                    label: themePrimary.dark,
                },
                active: {
                    background: canvas_kit_react_core_1.colors.soap300,
                    icon: themePrimary.dark,
                    label: themePrimary.dark,
                },
                focus: {
                    icon: themePrimary.dark,
                    label: themePrimary.dark,
                    focusRing: canvas_kit_react_common_1.focusRing({}, theme),
                },
                disabled: {
                    background: 'transparent',
                    icon: themePrimary.light,
                    label: themePrimary.light,
                },
            };
        case types_1.TextButtonVariant.Inverse:
            return {
                default: {
                    background: 'transparent',
                    icon: canvas_kit_react_core_1.colors.frenchVanilla100,
                    label: canvas_kit_react_core_1.colors.frenchVanilla100,
                },
                hover: {
                    background: canvas_kit_react_core_1.colors.frenchVanilla100,
                    icon: canvas_kit_react_core_1.colors.blackPepper400,
                    label: canvas_kit_react_core_1.colors.blackPepper400,
                },
                active: {
                    background: canvas_kit_react_core_1.colors.soap200,
                    icon: canvas_kit_react_core_1.colors.blackPepper400,
                    label: canvas_kit_react_core_1.colors.blackPepper400,
                },
                focus: {
                    background: canvas_kit_react_core_1.colors.frenchVanilla100,
                    icon: canvas_kit_react_core_1.colors.blackPepper400,
                    label: canvas_kit_react_core_1.colors.blackPepper400,
                    focusRing: canvas_kit_react_common_1.focusRing({
                        separation: 2,
                        inset: 'inner',
                        innerColor: 'currentColor',
                        outerColor: canvas_kit_react_core_1.colors.frenchVanilla100,
                    }, theme),
                },
                disabled: {
                    background: 'transparent',
                    icon: 'rgba(255, 255, 255, 0.5)',
                    label: 'rgba(255, 255, 255, 0.5)',
                },
            };
    }
};
var containerStyles = {
    borderRadius: canvas_kit_react_core_1.borderRadius.m,
    border: '0',
    padding: "0 " + canvas_kit_react_core_1.spacing.xxs,
    minWidth: 'auto',
    '.wdc-text-button-label': {
        borderBottom: '2px solid transparent',
        paddingTop: '2px',
        transition: 'border-color 0.3s',
    },
    '&:hover:not([disabled]) .wdc-text-button-label': {
        borderBottomColor: 'currentColor',
    },
};
var TextButton = function (_a) {
    var _b = _a.theme, theme = _b === void 0 ? canvas_kit_react_common_1.useTheme() : _b, _c = _a.variant, variant = _c === void 0 ? types_1.TextButtonVariant.Default : _c, _d = _a.size, size = _d === void 0 ? 'medium' : _d, _e = _a.iconPosition, iconPosition = _e === void 0 ? types_1.ButtonIconPosition.Left : _e, buttonRef = _a.buttonRef, children = _a.children, icon = _a.icon, allCaps = _a.allCaps, elemProps = __rest(_a, ["theme", "variant", "size", "iconPosition", "buttonRef", "children", "icon", "allCaps"]);
    var allContainerStyles = allCaps
        ? __assign(__assign(__assign(__assign({}, containerStyles), canvas_kit_labs_react_core_1.type.variant.caps), canvas_kit_labs_react_core_1.type.variant.button), { fontSize: size === 'medium' ? canvas_kit_labs_react_core_1.type.body.fontSize : undefined, letterSpacing: '.5px' }) : __assign(__assign({}, containerStyles), { fontSize: size === 'medium' ? canvas_kit_labs_react_core_1.type.body.fontSize : undefined });
    return (React.createElement(parts_1.ButtonContainer, __assign({ colors: getTextButtonColors(variant, theme), ref: buttonRef, size: size, extraStyles: allContainerStyles }, elemProps),
        icon && iconPosition === types_1.ButtonIconPosition.Left && (React.createElement(parts_1.ButtonLabelIcon, { size: size, iconPosition: iconPosition, icon: icon })),
        React.createElement(parts_1.ButtonLabel, { className: "wdc-text-button-label" }, children),
        icon && iconPosition === types_1.ButtonIconPosition.Right && (React.createElement(parts_1.ButtonLabelIcon, { size: size, iconPosition: iconPosition, icon: icon }))));
};
TextButton.IconPosition = types_1.ButtonIconPosition;
TextButton.Variant = types_1.TextButtonVariant;
TextButton.Size = {
    Small: 'small',
    Medium: 'medium',
};
exports.default = TextButton;
