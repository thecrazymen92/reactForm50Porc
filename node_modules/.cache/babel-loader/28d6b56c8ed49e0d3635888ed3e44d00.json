{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar _a;\n\nimport * as React from 'react';\nimport elementClosestPolyfill from 'element-closest';\nexport var InputType;\n\n(function (InputType) {\n  InputType[\"Initial\"] = \"initial\";\n  InputType[\"Keyboard\"] = \"keyboard\";\n  InputType[\"Mouse\"] = \"mouse\";\n  InputType[\"Pointer\"] = \"pointer\";\n  InputType[\"Touch\"] = \"touch\";\n})(InputType || (InputType = {}));\n\nexport var InputEventType;\n\n(function (InputEventType) {\n  InputEventType[\"KeyDown\"] = \"keydown\";\n  InputEventType[\"KeyUp\"] = \"keyup\";\n  InputEventType[\"MouseDown\"] = \"mousedown\";\n  InputEventType[\"MouseMove\"] = \"mousemove\";\n  InputEventType[\"Wheel\"] = \"wheel\";\n  InputEventType[\"MouseWheel\"] = \"mousewheel\";\n  InputEventType[\"PointerDown\"] = \"pointerdown\";\n  InputEventType[\"PointerMove\"] = \"pointermove\";\n  InputEventType[\"TouchStart\"] = \"touchstart\";\n})(InputEventType || (InputEventType = {}));\n\nvar formInputs = ['input', 'select', 'textarea'];\nvar ignoreMap = [16, 17, 18, 91, 93];\nexport var inputEventMap = (_a = {}, _a[InputEventType.KeyDown] = InputType.Keyboard, _a[InputEventType.KeyUp] = InputType.Keyboard, _a[InputEventType.MouseDown] = InputType.Mouse, _a[InputEventType.MouseMove] = InputType.Mouse, _a[InputEventType.Wheel] = InputType.Mouse, _a[InputEventType.MouseWheel] = InputType.Mouse, _a[InputEventType.PointerDown] = InputType.Pointer, _a[InputEventType.PointerMove] = InputType.Pointer, _a[InputEventType.TouchStart] = InputType.Touch, _a);\nvar pointerMap = {\n  2: InputType.Touch,\n  3: InputType.Touch,\n  4: InputType.Mouse\n};\n\nvar getPointerType = function getPointerType(event) {\n  if (typeof event.pointerType === 'number') {\n    return pointerMap[event.pointerType];\n  } else if (event.pointerType === 'mouse') {\n    return InputType.Mouse;\n  } else {\n    return InputType.Touch;\n  }\n};\n\nvar detectWheel = function detectWheel() {\n  var wheelType;\n\n  if ('onwheel' in document.createElement('div')) {\n    wheelType = InputEventType.Wheel;\n  } else {\n    wheelType = InputEventType.MouseWheel;\n  }\n\n  return wheelType;\n};\n\nvar supportsPassive = function supportsPassive() {\n  var supportsPassive;\n\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get: function get() {\n        supportsPassive = true;\n      }\n    });\n\n    var stub = function stub() {\n      return;\n    };\n\n    window.addEventListener('test', stub, opts);\n    window.removeEventListener('test', stub, opts);\n  } catch (e) {\n    console.warn('Browser does not support passive event listeners');\n  }\n\n  return supportsPassive || false;\n};\n\nvar InputProvider = function (_super) {\n  __extends(InputProvider, _super);\n\n  function InputProvider(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.isBuffering = false;\n    _this.isScrolling = false;\n    _this.mousePosX = null;\n    _this.mousePosY = null;\n    _this.deferInputTracking = false;\n    _this.provideIntent = _this.props.provideIntent;\n    var storedInput, storedIntent;\n\n    try {\n      storedInput = window.sessionStorage.getItem('what-input');\n      storedIntent = window.sessionStorage.getItem('what-intent');\n    } catch (e) {\n      console.warn('Failed to retrieve input status from session storage' + e);\n    }\n\n    _this.currentInput = storedInput || InputType.Initial;\n    _this.currentIntent = storedIntent || InputType.Initial;\n    _this.setInput = _this.setInput.bind(_this);\n    _this.setIntent = _this.setIntent.bind(_this);\n    _this.eventBuffer = _this.eventBuffer.bind(_this);\n    return _this;\n  }\n\n  InputProvider.prototype.getContainer = function (container) {\n    if (!container) {\n      return document.body;\n    }\n\n    if ('current' in container) {\n      if (container.current === null) {\n        console.warn('Your ref object can not be null, therefore, falling back to document.body');\n        return document.body;\n      } else {\n        return container.current;\n      }\n    }\n\n    return container;\n  };\n\n  InputProvider.prototype.componentDidMount = function () {\n    elementClosestPolyfill(window);\n    this.supportsPassive = supportsPassive();\n\n    if (this.getContainer(this.props.container).closest('[data-whatinput]')) {\n      this.deferInputTracking = true;\n      return;\n    }\n\n    this.updateAttributes();\n    this.enableListeners(true);\n  };\n\n  InputProvider.prototype.updateAttributes = function () {\n    var intent = this.provideIntent ? this.currentIntent : null;\n    this.getContainer(this.props.container).setAttribute('data-whatinput', this.currentInput);\n\n    if (intent) {\n      this.getContainer(this.props.container).setAttribute('data-whatintent', intent);\n    }\n\n    try {\n      window.sessionStorage.setItem('what-input', this.currentInput);\n      window.sessionStorage.setItem('what-intent', this.currentIntent);\n    } catch (e) {\n      console.warn('Failed to set input status in session storage' + e);\n    }\n  };\n\n  InputProvider.prototype.componentWillUnmount = function () {\n    if (this.deferInputTracking) {\n      return;\n    }\n\n    this.getContainer(this.props.container).removeAttribute('data-whatinput');\n    this.getContainer(this.props.container).removeAttribute('data-whatintent');\n    window.clearTimeout(this.eventTimer);\n    this.enableListeners(false);\n  };\n\n  InputProvider.prototype.enableListeners = function (enable) {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    var options = this.supportsPassive ? {\n      passive: true\n    } : false;\n    var fn = enable ? window.addEventListener : window.removeEventListener;\n\n    if (window.PointerEvent) {\n      fn('pointerdown', this.setInput);\n    } else {\n      fn('mousedown', this.setInput);\n\n      if ('ontouchstart' in window) {\n        fn('touchstart', this.eventBuffer, options);\n        fn('touchend', this.setInput);\n      }\n    }\n\n    if (this.provideIntent) {\n      if (window.PointerEvent) {\n        fn('pointermove', this.setIntent);\n      } else {\n        fn('mousemove', this.setIntent);\n      }\n\n      fn(detectWheel(), this.setIntent, options);\n    }\n\n    fn('keydown', this.eventBuffer);\n    fn('keyup', this.eventBuffer);\n  };\n\n  InputProvider.prototype.setInput = function (event) {\n    if (this.isBuffering) {\n      return;\n    }\n\n    var eventKey = 'which' in event ? event.which : undefined;\n    var eventType = event.type;\n    var value = inputEventMap[eventType];\n\n    if (value === InputType.Pointer) {\n      value = getPointerType(event);\n    }\n\n    var ignoreMatch = eventKey ? ignoreMap.indexOf(eventKey) === -1 : undefined;\n    var shouldUpdate = value === InputType.Keyboard && eventKey && ignoreMatch || value === InputType.Mouse || value === InputType.Touch;\n\n    if (this.currentInput !== value && shouldUpdate) {\n      this.currentInput = value;\n      this.updateAttributes();\n    }\n\n    if (this.currentIntent !== value && shouldUpdate && this.provideIntent) {\n      var activeElem = document.activeElement;\n      var notFormInput = activeElem && activeElem.nodeName && formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1;\n\n      if (notFormInput) {\n        this.currentIntent = value;\n        this.updateAttributes();\n      }\n    }\n  };\n\n  InputProvider.prototype.setIntent = function (event) {\n    this.detectScrolling(event);\n\n    if (!this.isBuffering && !this.isScrolling) {\n      var eventType = event.type;\n      var value = inputEventMap[eventType];\n\n      if (value === InputType.Pointer) {\n        value = getPointerType(event);\n      }\n\n      this.currentIntent = value;\n      this.updateAttributes();\n    }\n  };\n\n  InputProvider.prototype.eventBuffer = function (event) {\n    var _this = this;\n\n    this.setInput(event);\n    window.clearTimeout(this.eventTimer);\n    this.isBuffering = true;\n    this.eventTimer = window.setTimeout(function () {\n      _this.isBuffering = false;\n    }, 100);\n  };\n\n  InputProvider.prototype.detectScrolling = function (event) {\n    if (this.mousePosX !== event.screenX || this.mousePosY !== event.screenY) {\n      this.isScrolling = false;\n      this.mousePosX = event.screenX;\n      this.mousePosY = event.screenY;\n    } else {\n      this.isScrolling = true;\n    }\n  };\n\n  InputProvider.prototype.render = function () {\n    return this.props.children || null;\n  };\n\n  return InputProvider;\n}(React.Component);\n\nexport default InputProvider;","map":null,"metadata":{},"sourceType":"module"}