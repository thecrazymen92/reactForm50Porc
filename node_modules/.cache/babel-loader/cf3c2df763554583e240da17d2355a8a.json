{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { ErrorType, pickForegroundColor, styled } from '@workday/canvas-kit-react-common';\nimport { colors, commonColors, type } from '@workday/canvas-kit-react-core';\nvar optionPadding = 6;\n\nvar activeStyles = function activeStyles(theme) {\n  var activeBgColor = theme.canvas.palette.primary.main;\n  return {\n    backgroundColor: activeBgColor,\n    color: pickForegroundColor(activeBgColor)\n  };\n};\n\nvar Option = styled('li')(__assign(__assign({}, type.body), {\n  cursor: 'default',\n  listStyle: 'none',\n  minHeight: type.body.lineHeight,\n  textAlign: 'left'\n}), function (_a) {\n  var disabled = _a[\"aria-disabled\"],\n      focused = _a.focused,\n      interactive = _a.interactive,\n      theme = _a.theme;\n\n  if (disabled) {\n    return {\n      color: colors.licorice100\n    };\n  } else if (focused) {\n    return __assign({}, activeStyles(theme));\n  } else {\n    var selectedBgColor = theme.canvas.palette.primary.lightest;\n    var selectedStyles = {\n      '&[aria-selected=\"true\"]': {\n        backgroundColor: selectedBgColor,\n        color: pickForegroundColor(selectedBgColor)\n      }\n    };\n    var interactiveStyles = interactive ? {\n      '&:hover': {\n        backgroundColor: commonColors.hoverBackground\n      },\n      '&:active, &:active[aria-selected=\"true\"]': __assign({}, activeStyles(theme))\n    } : {};\n    return __assign(__assign({}, interactiveStyles), selectedStyles);\n  }\n}, function (_a) {\n  var error = _a.error;\n  return {\n    padding: optionPadding + \"px \" + (error === ErrorType.Alert ? optionPadding - 1 : optionPadding) + \"px\"\n  };\n});\n\nvar SelectOption = function SelectOption(_a) {\n  var children = _a.children,\n      _b = _a.focused,\n      focused = _b === void 0 ? false : _b,\n      _c = _a.interactive,\n      interactive = _c === void 0 ? true : _c,\n      optionRef = _a.optionRef,\n      value = _a.value,\n      elemProps = __rest(_a, [\"children\", \"focused\", \"interactive\", \"optionRef\", \"value\"]);\n\n  return React.createElement(Option, __assign({\n    \"data-value\": value,\n    focused: focused,\n    interactive: interactive,\n    ref: optionRef,\n    role: \"option\"\n  }, elemProps), children);\n};\n\nexport default SelectOption;","map":null,"metadata":{},"sourceType":"module"}