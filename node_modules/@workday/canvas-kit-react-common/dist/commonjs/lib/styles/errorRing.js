"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var canvas_kit_react_core_1 = require("@workday/canvas-kit-react-core");
var chroma_js_1 = __importDefault(require("chroma-js"));
var isAccessible = function (foreground, background) {
    if (background === void 0) { background = canvas_kit_react_core_1.colors.frenchVanilla100; }
    return chroma_js_1.default.contrast(foreground, background) >= 3;
};
function getErrorColors(error, theme) {
    if (error === types_1.ErrorType.Error) {
        if (theme) {
            var palette = theme.canvas.palette.error;
            return {
                outer: isAccessible(palette.main) ? palette.main : palette.darkest,
                inner: palette.main,
            };
        }
        else {
            return {
                outer: canvas_kit_react_core_1.inputColors.error.border,
                inner: canvas_kit_react_core_1.inputColors.error.border,
            };
        }
    }
    else if (error === types_1.ErrorType.Alert) {
        if (theme) {
            var palette = theme.canvas.palette.alert;
            return {
                outer: isAccessible(palette.main) ? palette.main : palette.darkest,
                inner: palette.main,
            };
        }
        else {
            return {
                outer: canvas_kit_react_core_1.colors.cantaloupe600,
                inner: canvas_kit_react_core_1.inputColors.alert.border,
            };
        }
    }
    else {
        return {};
    }
}
exports.getErrorColors = getErrorColors;
function errorRing(error, theme) {
    if (error !== types_1.ErrorType.Error && error !== types_1.ErrorType.Alert) {
        return {};
    }
    var errorColors = getErrorColors(error, theme);
    var errorBoxShadow = "inset 0 0 0 " + (errorColors.outer === errorColors.inner ? 1 : 2) + "px " + errorColors.inner;
    return {
        borderColor: errorColors.outer,
        transition: '100ms box-shadow',
        boxShadow: errorBoxShadow,
        '&:hover, &:disabled': {
            borderColor: errorColors.outer,
        },
        '&:focus:not([disabled])': {
            borderColor: errorColors.outer,
            boxShadow: errorBoxShadow + ",\n        0 0 0 2px " + canvas_kit_react_core_1.colors.frenchVanilla100 + ",\n        0 0 0 4px " + (theme ? theme.canvas.palette.common.focusOutline : canvas_kit_react_core_1.inputColors.focusBorder),
        },
    };
}
exports.errorRing = errorRing;
