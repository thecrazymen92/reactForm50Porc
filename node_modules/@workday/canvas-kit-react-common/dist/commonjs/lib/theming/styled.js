"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var styled_1 = __importDefault(require("@emotion/styled"));
var index_1 = require("./index");
var rtl_css_js_1 = __importDefault(require("rtl-css-js"));
var noop = function (styles) { return styles; };
exports.convertToStaticStates = function (obj) {
    if (!obj) {
        return obj;
    }
    return Object.keys(obj).reduce(function (result, key) {
        var _a;
        var newKey = key
            .replace(/^:/, '&:')
            .replace(/,(\s+):/g, ',$1&:')
            .replace(/:(focus|hover|active)/g, '.$1')
            .replace(/\[data\-whatinput=("|')?(mouse|touch|keyboard|pointer)("|')?]/g, '[data-whatinput="noop"]');
        var value = typeof obj[key] === 'object' ? exports.convertToStaticStates(obj[key]) : obj[key];
        var newObj = __assign(__assign({}, result), (_a = {}, _a[newKey] = value, _a));
        return newObj;
    }, {});
};
function styled(node) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var newArgs = args.map(function (interpolation) { return function (props) {
            props.theme = index_1.useTheme(props.theme);
            var direction = props.theme.canvas.direction;
            var maybeFlip = direction === index_1.ContentDirection.RTL ? rtl_css_js_1.default : noop;
            var maybeConvert = props.theme._staticStates ? exports.convertToStaticStates : noop;
            try {
                if (typeof interpolation === 'function') {
                    return maybeFlip(maybeConvert(interpolation(props)));
                }
                return maybeFlip(maybeConvert(interpolation));
            }
            catch (e) {
                return maybeConvert(interpolation);
            }
        }; });
        return styled_1.default(node)(newArgs);
    };
}
exports.default = styled;
