{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useState, useEffect, useLayoutEffect, useCallback } from 'react';\nimport { ErrorType, styled } from '@workday/canvas-kit-react-common';\nimport { Popper, useCloseOnEscape } from '@workday/canvas-kit-react-popup';\nimport { colors, borderRadius, inputColors } from '@workday/canvas-kit-react-core';\nimport { buttonBorderWidth } from './SelectBase';\nexport var menuAnimationDuration = 200;\n\nvar menuBorderStyles = function menuBorderStyles(theme, error) {\n  var borderColor = theme.canvas.palette.common.focusOutline;\n  var dividerBorderColor = borderColor;\n  var dividerBorderWidth = 1;\n\n  if (error === ErrorType.Error) {\n    borderColor = theme.canvas.palette.error.main;\n    dividerBorderColor = borderColor;\n  } else if (error === ErrorType.Alert) {\n    borderColor = theme.canvas.palette.alert.darkest;\n    dividerBorderColor = theme.canvas.palette.alert.main;\n    dividerBorderWidth = 2;\n  }\n\n  var dividerBorder = dividerBorderWidth + \"px solid \" + dividerBorderColor;\n  return {\n    borderColor: borderColor,\n    '&:before': {\n      backgroundColor: colors.soap400,\n      borderLeft: dividerBorder,\n      borderRight: dividerBorder,\n      boxSizing: 'border-box',\n      content: '\"\"',\n      display: 'block',\n      height: 1,\n      position: 'absolute',\n      width: '100%',\n      '[data-popper-placement=\"bottom\"] &': {\n        top: 0\n      },\n      '[data-popper-placement=\"top\"] &': {\n        bottom: 0\n      }\n    }\n  };\n};\n\nvar menuListBorderStyles = function menuListBorderStyles(theme, error) {\n  var borderColor = theme.canvas.palette.common.focusOutline;\n  var borderWidth = 1;\n\n  if (error === ErrorType.Error) {\n    borderColor = theme.canvas.palette.error.main;\n  } else if (error === ErrorType.Alert) {\n    borderColor = theme.canvas.palette.alert.main;\n    borderWidth = 2;\n  }\n\n  var border = borderWidth + \"px solid \" + borderColor;\n  return {\n    borderLeft: border,\n    borderRight: border,\n    '[data-popper-placement=\"bottom\"] &': {\n      borderBottom: border\n    },\n    '[data-popper-placement=\"top\"] &': {\n      borderTop: border\n    }\n  };\n};\n\nvar Menu = styled('div')({\n  backgroundColor: colors.frenchVanilla100,\n  border: \"1px solid \" + inputColors.border,\n  boxSizing: 'border-box',\n  position: 'relative',\n  transition: \"opacity \" + menuAnimationDuration + \"ms\",\n  '[data-popper-placement=\"bottom\"] &': {\n    borderRadius: \"0 0 \" + borderRadius.m + \" \" + borderRadius.m,\n    borderTop: 0\n  },\n  '[data-popper-placement=\"top\"] &': {\n    borderRadius: borderRadius.m + \" \" + borderRadius.m + \" 0 0\",\n    borderBottom: 0\n  }\n}, function (_a) {\n  var error = _a.error,\n      theme = _a.theme;\n  return __assign({}, menuBorderStyles(theme, error));\n}, function (_a) {\n  var visibility = _a.visibility;\n  return {\n    opacity: visibility === 'opening' || visibility === 'opened' || visibility === 'close' ? 1 : 0\n  };\n}, function (_a) {\n  var width = _a.width;\n  return {\n    width: width\n  };\n});\nvar MenuList = styled('ul')({\n  listStyle: 'none',\n  margin: 0,\n  maxHeight: 200,\n  outline: 'none',\n  overflowY: 'auto',\n  padding: 0\n}, function (_a) {\n  var error = _a.error,\n      theme = _a.theme;\n  return __assign({}, menuListBorderStyles(theme, error));\n});\n\nvar generatePopperOptions = function generatePopperOptions(props) {\n  var menuRef = props.menuRef,\n      placement = props.placement,\n      shouldAutoFlip = props.shouldAutoFlip,\n      shouldAutoFocus = props.shouldAutoFocus;\n  var fallbackPlacements = [];\n\n  if (shouldAutoFlip) {\n    fallbackPlacements = placement === 'top' ? ['bottom'] : ['top'];\n  }\n\n  var modifiers = [{\n    name: 'flip',\n    options: {\n      fallbackPlacements: fallbackPlacements\n    }\n  }, {\n    name: 'offset',\n    options: {\n      offset: function offset() {\n        var skidding = 0;\n        var distance = -parseInt(borderRadius.m, 10);\n        return [skidding, distance];\n      }\n    }\n  }, {\n    name: 'preventOverflow',\n    options: {\n      mainAxis: false\n    }\n  }];\n  return {\n    modifiers: modifiers,\n    onFirstUpdate: function onFirstUpdate() {\n      if (shouldAutoFocus && menuRef && menuRef.current) {\n        menuRef.current.focus();\n      }\n    }\n  };\n};\n\nvar SelectMenu = function SelectMenu(_a) {\n  var buttonRef = _a.buttonRef,\n      children = _a.children,\n      error = _a.error,\n      menuRef = _a.menuRef,\n      onCloseOnEscape = _a.onCloseOnEscape,\n      _b = _a.placement,\n      placement = _b === void 0 ? 'bottom' : _b,\n      _c = _a.shouldAutoFlip,\n      shouldAutoFlip = _c === void 0 ? true : _c,\n      _d = _a.shouldAutoFocus,\n      shouldAutoFocus = _d === void 0 ? true : _d,\n      _e = _a.visibility,\n      visibility = _e === void 0 ? 'closed' : _e,\n      elemProps = __rest(_a, [\"buttonRef\", \"children\", \"error\", \"menuRef\", \"onCloseOnEscape\", \"placement\", \"shouldAutoFlip\", \"shouldAutoFocus\", \"visibility\"]);\n\n  var popupRef = React.useRef(null);\n\n  var _f = useState(0),\n      width = _f[0],\n      setWidth = _f[1];\n\n  var handleWidthChange = useCallback(function () {\n    if (buttonRef.current && visibility !== 'closed') {\n      var newMenuWidth = buttonRef.current.clientWidth + 2 * buttonBorderWidth;\n      setWidth(newMenuWidth);\n    }\n  }, [buttonRef, visibility]);\n  useLayoutEffect(function () {\n    handleWidthChange();\n  }, [handleWidthChange]);\n  useEffect(function () {\n    window.addEventListener('resize', handleWidthChange);\n    return function () {\n      window.removeEventListener('resize', handleWidthChange);\n    };\n  }, [handleWidthChange]);\n  useCloseOnEscape(popupRef, function () {\n    return onCloseOnEscape === null || onCloseOnEscape === void 0 ? void 0 : onCloseOnEscape();\n  });\n  return React.createElement(Popper, {\n    placement: placement,\n    anchorElement: buttonRef,\n    popperOptions: generatePopperOptions({\n      menuRef: menuRef,\n      placement: placement,\n      shouldAutoFlip: shouldAutoFlip,\n      shouldAutoFocus: shouldAutoFocus\n    }),\n    ref: popupRef\n  }, React.createElement(Menu, {\n    error: error,\n    visibility: visibility,\n    width: width\n  }, React.createElement(MenuList, __assign({\n    error: error,\n    ref: menuRef,\n    role: \"listbox\",\n    tabIndex: -1\n  }, elemProps), children)));\n};\n\nexport default SelectMenu;","map":null,"metadata":{},"sourceType":"module"}