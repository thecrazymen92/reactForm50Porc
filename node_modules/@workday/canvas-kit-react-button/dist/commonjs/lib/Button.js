"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var canvas_kit_react_core_1 = require("@workday/canvas-kit-react-core");
var canvas_kit_react_common_1 = require("@workday/canvas-kit-react-common");
var types_1 = require("./types");
var parts_1 = require("./parts");
var Button = function (_a) {
    var _b = _a.theme, theme = _b === void 0 ? canvas_kit_react_common_1.useTheme() : _b, _c = _a.variant, variant = _c === void 0 ? types_1.ButtonVariant.Secondary : _c, _d = _a.size, size = _d === void 0 ? 'medium' : _d, buttonRef = _a.buttonRef, dataLabel = _a.dataLabel, icon = _a.icon, children = _a.children, elemProps = __rest(_a, ["theme", "variant", "size", "buttonRef", "dataLabel", "icon", "children"]);
    return (React.createElement(parts_1.ButtonContainer, __assign({ colors: exports.getButtonColors(variant, theme), size: size, ref: buttonRef }, elemProps),
        icon && size !== 'small' && React.createElement(parts_1.ButtonLabelIcon, { size: size, icon: icon }),
        React.createElement(parts_1.ButtonLabel, null, children),
        dataLabel && size !== 'small' && React.createElement(parts_1.ButtonLabelData, null, dataLabel)));
};
Button.Variant = types_1.ButtonVariant;
Button.Size = types_1.ButtonSize;
exports.default = Button;
exports.getButtonColors = function (variant, _a) {
    var themePrimary = _a.canvas.palette.primary;
    switch (variant) {
        case types_1.ButtonVariant.Primary:
        case types_1.DropdownButtonVariant.Primary:
            return {
                default: {
                    background: themePrimary.main,
                    icon: themePrimary.contrast,
                    label: themePrimary.contrast,
                },
                hover: {
                    background: themePrimary.dark,
                },
                active: {
                    background: themePrimary.darkest,
                },
                focus: {
                    background: themePrimary.main,
                },
                disabled: {
                    background: themePrimary.light,
                },
            };
        case types_1.ButtonVariant.Secondary:
        case types_1.DropdownButtonVariant.Secondary:
        default:
            return {
                default: {
                    background: canvas_kit_react_core_1.colors.soap200,
                    icon: canvas_kit_react_core_1.colors.licorice200,
                    label: canvas_kit_react_core_1.colors.blackPepper400,
                    labelData: canvas_kit_react_core_1.colors.blackPepper400,
                },
                hover: {
                    background: canvas_kit_react_core_1.colors.soap400,
                    icon: canvas_kit_react_core_1.colors.licorice500,
                },
                active: {
                    background: canvas_kit_react_core_1.colors.soap500,
                    icon: canvas_kit_react_core_1.colors.licorice500,
                },
                focus: {
                    background: canvas_kit_react_core_1.colors.soap200,
                    icon: canvas_kit_react_core_1.colors.licorice500,
                },
                disabled: {
                    background: canvas_kit_react_core_1.colors.soap100,
                    icon: canvas_kit_react_core_1.colors.soap600,
                    label: canvas_kit_react_core_1.colors.licorice100,
                    labelData: canvas_kit_react_core_1.colors.licorice100,
                },
            };
    }
};
