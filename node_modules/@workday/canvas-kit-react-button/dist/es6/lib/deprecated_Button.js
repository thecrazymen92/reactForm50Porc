var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import canvas, { borderRadius, type } from '@workday/canvas-kit-react-core';
import { focusRing, mouseFocusBehavior } from '@workday/canvas-kit-react-common';
import { DeprecatedButtonVariant, ButtonSize } from './types';
import styled from '@emotion/styled';
var Container = styled('button')(__assign(__assign({ fontFamily: type.body.fontFamily, fontSize: type.body.fontSize }, type.variant.button), { boxSizing: 'border-box', display: 'inline-flex', alignItems: 'center', justifyContent: 'center', borderRadius: borderRadius.circle, border: '1px solid transparent', boxShadow: 'none', position: 'relative', cursor: 'pointer', outline: 'none', transition: 'box-shadow 120ms linear, border 120ms linear, background-color 120ms linear, color 120ms linear', '&:hover:active': { transitionDuration: '40ms' }, '&:disabled, &:disabled:active': { cursor: 'default', boxShadow: 'none' } }), function (_a) {
    var size = _a.size;
    switch (size) {
        case 'large':
            return {
                height: '40px',
                padding: "0 " + canvas.spacing.l,
                minWidth: '112px',
                maxWidth: '288px',
            };
        case 'medium':
        default:
            return {
                height: '24px',
                padding: "0 " + canvas.spacing.m,
                minWidth: '80px',
                maxWidth: '200px',
                fontSize: type.body2.fontSize,
            };
        case 'small':
            return {
                height: '18px',
                padding: "0 " + canvas.spacing.xxs,
                minWidth: '56px',
                maxWidth: '120px',
                fontSize: '10px',
                lineHeight: 'normal',
            };
    }
}, function (_a) {
    var grow = _a.grow;
    return grow && { width: '100%', maxWidth: '100%' };
}, function (_a) {
    var variant = _a.variant;
    var buttonColors;
    switch (variant) {
        case DeprecatedButtonVariant.Primary:
            buttonColors = canvas.buttonColors.primary;
            break;
        case DeprecatedButtonVariant.Secondary:
        default:
            buttonColors = canvas.buttonColors.secondary;
            break;
        case DeprecatedButtonVariant.Delete:
            buttonColors = __assign(__assign({}, canvas.buttonColors.delete), { focusBorder: canvas.colors.cinnamon500, activeBorder: canvas.colors.cinnamon500 });
            break;
    }
    if (!buttonColors) {
        return {};
    }
    var baseStyles = {
        backgroundColor: buttonColors.background,
        borderColor: buttonColors.border,
        color: buttonColors.text,
    };
    var hoverStyles = {
        ':hover': {
            backgroundColor: buttonColors.hoverBackground,
            borderColor: buttonColors.hoverBorder,
            color: buttonColors.hoverText,
        },
    };
    var activeStyles = {
        ':active, :focus:active, :hover:active': {
            backgroundColor: buttonColors.activeBackground,
            borderColor: buttonColors.activeBorder,
            color: buttonColors.activeText,
        },
    };
    return __assign(__assign(__assign(__assign(__assign(__assign({}, baseStyles), { ':focus': {
            backgroundColor: buttonColors.focusBackground,
            borderColor: buttonColors.focusBorder,
            color: buttonColors.focusText,
        } }), activeStyles), hoverStyles), { ':disabled, :active:disabled, :focus:disabled, :hover:disabled': {
            backgroundColor: buttonColors.disabledBackground,
            borderColor: buttonColors.disabledBorder,
            color: buttonColors.disabledText,
        }, '&:not([disabled])': {
            '&:focus': __assign({ borderColor: buttonColors.focusBorder }, focusRing()),
            '&:active': __assign({ borderColor: buttonColors.activeBorder }, focusRing()),
        } }), mouseFocusBehavior({
        '&:focus': __assign(__assign(__assign(__assign({}, baseStyles), { outline: 'none', boxShadow: 'none', animation: 'none' }), hoverStyles), activeStyles),
    }));
});
var DeprecatedButton = function (_a) {
    var _b = _a.variant, variant = _b === void 0 ? DeprecatedButtonVariant.Secondary : _b, _c = _a.size, size = _c === void 0 ? 'large' : _c, buttonRef = _a.buttonRef, children = _a.children, elemProps = __rest(_a, ["variant", "size", "buttonRef", "children"]);
    React.useEffect(function () {
        console.warn('This component is now deprecated, consider using the new Button component');
    }, []);
    return (React.createElement(Container, __assign({ variant: variant, size: size, ref: buttonRef }, elemProps), children));
};
DeprecatedButton.Variant = DeprecatedButtonVariant;
DeprecatedButton.Size = ButtonSize;
export default DeprecatedButton;
