import * as React from 'react';
export interface InputProviderProps {
    provideIntent?: boolean;
    container?: HTMLElement | React.RefObject<HTMLElement>;
}
export declare enum InputType {
    Initial = "initial",
    Keyboard = "keyboard",
    Mouse = "mouse",
    Pointer = "pointer",
    Touch = "touch"
}
export declare enum InputEventType {
    KeyDown = "keydown",
    KeyUp = "keyup",
    MouseDown = "mousedown",
    MouseMove = "mousemove",
    Wheel = "wheel",
    MouseWheel = "mousewheel",
    PointerDown = "pointerdown",
    PointerMove = "pointermove",
    TouchStart = "touchstart"
}
declare type InputEvent = Event | React.KeyboardEvent | React.MouseEvent | React.TouchEvent | React.PointerEvent;
export declare const inputEventMap: {
    keydown: InputType;
    keyup: InputType;
    mousedown: InputType;
    mousemove: InputType;
    wheel: InputType;
    mousewheel: InputType;
    pointerdown: InputType;
    pointermove: InputType;
    touchstart: InputType;
};
export default class InputProvider extends React.Component<InputProviderProps> {
    private eventTimer;
    private currentInput;
    private currentIntent;
    private supportsPassive;
    private isBuffering;
    private isScrolling;
    private mousePosX;
    private mousePosY;
    private deferInputTracking;
    constructor(props: any);
    provideIntent: boolean | undefined;
    getContainer(container?: HTMLElement | React.RefObject<HTMLElement>): HTMLElement;
    componentDidMount(): void;
    updateAttributes(): void;
    componentWillUnmount(): void;
    enableListeners(enable: boolean): void;
    setInput(event: InputEvent): void;
    setIntent(event: InputEvent): void;
    eventBuffer(event: Event): void;
    detectScrolling(event: React.MouseEvent): void;
    render(): {} | null;
}
export {};
//# sourceMappingURL=InputProvider.d.ts.map