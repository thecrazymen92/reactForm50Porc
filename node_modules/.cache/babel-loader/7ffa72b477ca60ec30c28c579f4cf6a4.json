{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { colors, BrandingColor } from '@workday/canvas-kit-react-core';\nimport { CanvasIconTypes } from '@workday/design-assets-types';\nimport Icon from './Icon';\nexport var appletIconStyles = function appletIconStyles(_a) {\n  var _b = _a.color,\n      color = _b === void 0 ? BrandingColor.Blueberry : _b;\n\n  if (!Object.keys(BrandingColor).map(function (color) {\n    return BrandingColor[color];\n  }).includes(color)) {\n    throw Error(\"Color \\\"\" + color + \"\\\" not found\");\n  }\n\n  var colorNames = {\n    100: color + \"100\",\n    200: color + \"200\",\n    300: color + \"300\",\n    400: color + \"400\",\n    500: color + \"500\"\n  };\n  return {\n    '& .color-100': {\n      fill: colors.frenchVanilla100\n    },\n    '& .color-200': {\n      fill: colors[colorNames[200]]\n    },\n    '& .color-300': {\n      fill: colors[colorNames[300]]\n    },\n    '& .color-400': {\n      fill: colors[colorNames[400]]\n    },\n    '& .color-400-alpha-20': {\n      fill: colors[colorNames[400]]\n    },\n    '& .color-500': {\n      fill: colors[colorNames[500]]\n    }\n  };\n};\n\nvar AppletIcon = function (_super) {\n  __extends(AppletIcon, _super);\n\n  function AppletIcon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AppletIcon.prototype.render = function () {\n    var _a = this.props,\n        _b = _a.size,\n        size = _b === void 0 ? 92 : _b,\n        icon = _a.icon,\n        color = _a.color,\n        iconRef = _a.iconRef,\n        elemProps = __rest(_a, [\"size\", \"icon\", \"color\", \"iconRef\"]);\n\n    return React.createElement(Icon, __assign({\n      src: icon,\n      type: CanvasIconTypes.Applet,\n      styles: appletIconStyles({\n        color: color\n      }),\n      size: size,\n      iconRef: iconRef\n    }, elemProps));\n  };\n\n  AppletIcon.Colors = BrandingColor;\n  return AppletIcon;\n}(React.Component);\n\nexport default AppletIcon;","map":null,"metadata":{},"sourceType":"module"}