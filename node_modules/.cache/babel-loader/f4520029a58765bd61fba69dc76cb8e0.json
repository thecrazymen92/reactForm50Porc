{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useLayoutEffect } from 'react';\nimport uuid from 'uuid/v4';\nimport { errorRing, styled } from '@workday/canvas-kit-react-common';\nimport { colors, borderRadius, inputColors, spacingNumbers, type, spacing } from '@workday/canvas-kit-react-core';\nimport { caretDownSmallIcon } from '@workday/canvas-system-icons-web';\nimport { SystemIcon } from '@workday/canvas-kit-react-icon';\nimport SelectMenu from './SelectMenu';\nimport SelectOption from './SelectOption';\nimport { scrollIntoViewIfNeeded } from './scrolling';\nimport { getCorrectedIndexByValue } from './utils';\nexport var buttonBorderWidth = 1;\nexport var buttonDefaultWidth = 280;\nvar menuIconSize = 24;\nvar buttonPadding = spacingNumbers.xxs - buttonBorderWidth;\nvar SelectButton = styled('button')(__assign(__assign({}, type.body), {\n  border: buttonBorderWidth + \"px solid \" + inputColors.border,\n  cursor: 'default',\n  display: 'block',\n  backgroundColor: inputColors.background,\n  borderRadius: borderRadius.m,\n  boxSizing: 'border-box',\n  height: spacing.xl,\n  outline: 'none',\n  overflow: 'hidden',\n  padding: buttonPadding,\n  paddingRight: spacingNumbers.xxs + menuIconSize + buttonPadding,\n  textAlign: 'left',\n  textOverflow: 'ellipsis',\n  transition: '0.2s box-shadow, 0.2s border-color',\n  whiteSpace: 'nowrap',\n  width: buttonDefaultWidth,\n  '&::placeholder': {\n    color: inputColors.placeholder\n  },\n  '&:disabled': {\n    backgroundColor: inputColors.disabled.background,\n    borderColor: inputColors.disabled.border,\n    color: inputColors.disabled.text,\n    '&::placeholder': {\n      color: inputColors.disabled.text\n    }\n  }\n}), function (_a) {\n  var error = _a.error,\n      menuVisibility = _a.menuVisibility,\n      theme = _a.theme;\n  var themedFocusOutlineColor = theme.canvas.palette.common.focusOutline;\n  var buttonFocusStyles = {\n    borderColor: themedFocusOutlineColor,\n    boxShadow: \"inset 0 0 0 1px \" + themedFocusOutlineColor\n  };\n\n  if (error === undefined) {\n    return menuVisibility === 'closed' || menuVisibility === 'closing' ? {\n      '&:focus:not([disabled])': __assign({}, buttonFocusStyles),\n      '&:hover:not([disabled]):not(:focus)': {\n        borderColor: inputColors.hoverBorder\n      }\n    } : __assign({}, buttonFocusStyles);\n  }\n\n  return __assign({}, errorRing(error, theme));\n}, function (_a) {\n  var grow = _a.grow;\n  return grow && {\n    width: '100%'\n  };\n});\nvar SelectMenuIcon = styled(SystemIcon)({\n  position: 'absolute',\n  top: spacing.xxxs,\n  right: spacing.xxxs,\n  padding: spacing.xxxs,\n  pointerEvents: 'none',\n  '& path': {\n    transition: '100ms fill'\n  }\n});\nvar SelectInput = styled('input')({\n  display: 'none'\n});\nvar SelectWrapper = styled('div')({\n  position: 'relative'\n}, function (_a) {\n  var grow = _a.grow;\n  return {\n    display: grow ? 'block' : 'inline-block'\n  };\n}, function (_a) {\n  var disabled = _a.disabled;\n  return {\n    '&:hover .menu-icon path': {\n      fill: disabled ? undefined : colors.licorice500\n    }\n  };\n});\n\nvar defaultRenderOption = function defaultRenderOption(option) {\n  return React.createElement(\"div\", null, option.label);\n};\n\nvar SelectBase = function SelectBase(_a) {\n  var ariaLabelledBy = _a[\"aria-labelledby\"],\n      ariaRequired = _a[\"aria-required\"],\n      buttonRef = _a.buttonRef,\n      disabled = _a.disabled,\n      error = _a.error,\n      _b = _a.focusedOptionIndex,\n      focusedOptionIndex = _b === void 0 ? 0 : _b,\n      grow = _a.grow,\n      inputRef = _a.inputRef,\n      _c = _a.menuPlacement,\n      menuPlacement = _c === void 0 ? 'bottom' : _c,\n      menuRef = _a.menuRef,\n      _d = _a.menuVisibility,\n      menuVisibility = _d === void 0 ? 'closed' : _d,\n      onChange = _a.onChange,\n      onKeyDown = _a.onKeyDown,\n      onMenuBlur = _a.onMenuBlur,\n      onMenuCloseOnEscape = _a.onMenuCloseOnEscape,\n      onOptionSelection = _a.onOptionSelection,\n      options = _a.options,\n      _e = _a.renderOption,\n      renderOption = _e === void 0 ? defaultRenderOption : _e,\n      required = _a.required,\n      _f = _a.shouldMenuAutoFlip,\n      shouldMenuAutoFlip = _f === void 0 ? true : _f,\n      _g = _a.shouldMenuAutoFocus,\n      shouldMenuAutoFocus = _g === void 0 ? true : _g,\n      value = _a.value,\n      elemProps = __rest(_a, ['aria-labelledby', 'aria-required', \"buttonRef\", \"disabled\", \"error\", \"focusedOptionIndex\", \"grow\", \"inputRef\", \"menuPlacement\", \"menuRef\", \"menuVisibility\", \"onChange\", \"onKeyDown\", \"onMenuBlur\", \"onMenuCloseOnEscape\", \"onOptionSelection\", \"options\", \"renderOption\", \"required\", \"shouldMenuAutoFlip\", \"shouldMenuAutoFocus\", \"value\"]);\n\n  var focusedOptionRef = React.useRef(null);\n  var menuId = React.useState(function () {\n    return \"a\" + uuid();\n  })[0];\n\n  var renderOptions = function renderOptions(renderOption) {\n    var selectedOptionIndex = getCorrectedIndexByValue(options, value);\n    return options.map(function (option, index) {\n      var optionProps = __assign({\n        'aria-disabled': option.disabled ? true : undefined,\n        'aria-selected': selectedOptionIndex === index ? true : undefined,\n        error: error,\n        focused: focusedOptionIndex === index,\n        id: option.id,\n        interactive: menuVisibility === 'opening' || menuVisibility === 'opened',\n        key: option.id,\n        optionRef: focusedOptionIndex === index ? focusedOptionRef : undefined,\n        value: option.value\n      }, onOptionSelection ? {\n        onClick: function onClick(event) {\n          event.preventDefault();\n          onOptionSelection(index);\n        }\n      } : {});\n\n      var normalizedOption = __assign(__assign({}, option), {\n        focused: optionProps.focused,\n        selected: !!optionProps['aria-selected']\n      });\n\n      return React.createElement(SelectOption, __assign({}, optionProps), renderOption(normalizedOption));\n    });\n  };\n\n  useLayoutEffect(function () {\n    var focusedOption = focusedOptionRef.current;\n\n    if (focusedOption) {\n      var animateId_1 = requestAnimationFrame(function () {\n        scrollIntoViewIfNeeded(focusedOption, false);\n      });\n      return function () {\n        cancelAnimationFrame(animateId_1);\n      };\n    }\n\n    return undefined;\n  }, [focusedOptionIndex]);\n  useLayoutEffect(function () {\n    var focusedOption = focusedOptionRef.current;\n\n    if (focusedOption && (menuVisibility === 'opening' || menuVisibility === 'opened')) {\n      var animateId_2 = requestAnimationFrame(function () {\n        scrollIntoViewIfNeeded(focusedOption, true);\n      });\n      return function () {\n        cancelAnimationFrame(animateId_2);\n      };\n    }\n\n    return undefined;\n  }, [menuVisibility]);\n  var hasOptions = options.length > 0;\n  var selectedOption = hasOptions ? options[getCorrectedIndexByValue(options, value)] : null;\n  var selectedOptionLabel = selectedOption ? selectedOption.label : '';\n  var selectedOptionValue = selectedOption ? selectedOption.value : '';\n  return React.createElement(SelectWrapper, {\n    grow: grow,\n    disabled: disabled\n  }, React.createElement(SelectButton, __assign({\n    \"aria-expanded\": menuVisibility !== 'closed' ? 'true' : undefined,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-controls\": menuVisibility !== 'closed' ? menuId : undefined,\n    disabled: disabled,\n    error: error,\n    grow: grow,\n    menuVisibility: menuVisibility,\n    onKeyDown: onKeyDown,\n    onKeyUp: function onKeyUp(e) {\n      e.preventDefault();\n    },\n    ref: buttonRef,\n    type: \"button\",\n    value: selectedOptionValue\n  }, elemProps), selectedOptionLabel), React.createElement(SelectInput, {\n    onChange: onChange,\n    ref: inputRef,\n    type: \"text\",\n    value: selectedOptionValue\n  }), hasOptions && menuVisibility !== 'closed' && React.createElement(SelectMenu, {\n    \"aria-activedescendant\": options[focusedOptionIndex].id,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-required\": ariaRequired || required ? true : undefined,\n    buttonRef: buttonRef,\n    id: menuId,\n    error: error,\n    menuRef: menuRef,\n    onBlur: onMenuBlur,\n    onKeyDown: onKeyDown,\n    onCloseOnEscape: onMenuCloseOnEscape,\n    placement: menuPlacement,\n    shouldAutoFlip: shouldMenuAutoFlip,\n    shouldAutoFocus: shouldMenuAutoFocus,\n    visibility: menuVisibility\n  }, renderOptions(renderOption)), React.createElement(SelectMenuIcon, {\n    className: \"menu-icon\",\n    icon: caretDownSmallIcon,\n    color: disabled ? colors.licorice100 : colors.licorice200,\n    colorHover: disabled ? colors.licorice100 : colors.licorice500,\n    size: menuIconSize\n  }));\n};\n\nexport default SelectBase;","map":null,"metadata":{},"sourceType":"module"}