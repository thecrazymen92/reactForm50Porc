{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { colors } from '@workday/canvas-kit-react-core';\nimport { focusRing, useTheme } from '@workday/canvas-kit-react-common';\nimport { OutlineButtonVariant, ButtonSize } from './types';\nimport { ButtonContainer, ButtonLabel, ButtonLabelData, ButtonLabelIcon } from './parts';\n\nvar OutlineButton = function OutlineButton(_a) {\n  var _b = _a.theme,\n      theme = _b === void 0 ? useTheme() : _b,\n      _c = _a.variant,\n      variant = _c === void 0 ? OutlineButtonVariant.Secondary : _c,\n      _d = _a.size,\n      size = _d === void 0 ? 'medium' : _d,\n      buttonRef = _a.buttonRef,\n      dataLabel = _a.dataLabel,\n      icon = _a.icon,\n      children = _a.children,\n      elemProps = __rest(_a, [\"theme\", \"variant\", \"size\", \"buttonRef\", \"dataLabel\", \"icon\", \"children\"]);\n\n  return React.createElement(ButtonContainer, __assign({\n    colors: getOutlineButtonColors(variant, theme),\n    size: size,\n    ref: buttonRef\n  }, elemProps), icon && size !== 'small' && React.createElement(ButtonLabelIcon, {\n    size: size,\n    icon: icon\n  }), React.createElement(ButtonLabel, null, children), dataLabel && size !== 'small' && React.createElement(ButtonLabelData, null, dataLabel));\n};\n\nOutlineButton.Variant = OutlineButtonVariant;\nOutlineButton.Size = ButtonSize;\nexport default OutlineButton;\nexport var getOutlineButtonColors = function getOutlineButtonColors(variant, theme) {\n  var themePrimary = theme.canvas.palette.primary;\n\n  switch (variant) {\n    case OutlineButtonVariant.Primary:\n      return {\n        default: {\n          background: 'transparent',\n          border: themePrimary.main,\n          icon: themePrimary.main,\n          label: themePrimary.main\n        },\n        hover: {\n          background: themePrimary.main,\n          icon: themePrimary.contrast,\n          label: themePrimary.contrast\n        },\n        active: {\n          background: themePrimary.dark,\n          border: themePrimary.dark,\n          icon: themePrimary.contrast,\n          label: themePrimary.contrast\n        },\n        focus: {\n          background: themePrimary.main,\n          icon: themePrimary.contrast,\n          label: themePrimary.contrast\n        },\n        disabled: {\n          background: 'transparent',\n          border: colors.soap500,\n          icon: colors.soap600,\n          label: colors.licorice100\n        }\n      };\n\n    case OutlineButtonVariant.Secondary:\n    default:\n      return {\n        default: {\n          background: 'transparent',\n          border: colors.soap500,\n          icon: colors.licorice200,\n          label: colors.blackPepper400\n        },\n        hover: {\n          background: colors.licorice500,\n          border: colors.licorice500,\n          icon: themePrimary.contrast,\n          label: themePrimary.contrast\n        },\n        active: {\n          background: colors.licorice600,\n          border: colors.licorice600,\n          icon: themePrimary.contrast,\n          label: themePrimary.contrast\n        },\n        focus: {\n          background: colors.licorice500,\n          border: colors.licorice500,\n          icon: themePrimary.contrast,\n          label: themePrimary.contrast\n        },\n        disabled: {\n          background: 'transparent',\n          border: colors.soap500,\n          icon: colors.soap600,\n          label: colors.licorice100\n        }\n      };\n\n    case OutlineButtonVariant.Inverse:\n      return {\n        default: {\n          background: 'transparent',\n          border: colors.frenchVanilla100,\n          icon: colors.frenchVanilla100,\n          label: colors.frenchVanilla100\n        },\n        hover: {\n          background: colors.frenchVanilla100,\n          icon: colors.licorice500,\n          label: colors.blackPepper400,\n          labelData: colors.licorice300\n        },\n        active: {\n          background: colors.soap300,\n          border: colors.soap300,\n          icon: colors.licorice500,\n          label: colors.blackPepper400,\n          labelData: colors.licorice300\n        },\n        focus: {\n          background: colors.frenchVanilla100,\n          icon: colors.licorice500,\n          label: colors.blackPepper400,\n          labelData: colors.licorice300,\n          focusRing: focusRing({\n            separation: 2,\n            innerColor: 'currentColor',\n            outerColor: colors.frenchVanilla100\n          }, theme)\n        },\n        disabled: {\n          background: 'transparent',\n          border: 'rgba(255, 255, 255, 0.75)',\n          icon: 'rgba(255, 255, 255, 0.75)',\n          label: 'rgba(255, 255, 255, 0.75)',\n          labelData: 'rgba(255, 255, 255, 0.75)'\n        }\n      };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}