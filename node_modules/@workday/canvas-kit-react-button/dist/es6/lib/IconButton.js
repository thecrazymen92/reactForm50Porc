var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { colors, spacing, borderRadius } from '@workday/canvas-kit-react-core';
import { focusRing, useTheme } from '@workday/canvas-kit-react-common';
import { SystemIcon } from '@workday/canvas-kit-react-icon';
import { IconButtonVariant } from './types';
import { ButtonContainer } from './parts';
var IconButton = function (_a) {
    var _b;
    var _c = _a.theme, theme = _c === void 0 ? useTheme() : _c, _d = _a.variant, variant = _d === void 0 ? IconButtonVariant.Circle : _d, _e = _a.size, size = _e === void 0 ? 'medium' : _e, buttonRef = _a.buttonRef, onToggleChange = _a.onToggleChange, iconArialabel = _a["aria-label"], icon = _a.icon, toggled = _a.toggled, children = _a.children, elemProps = __rest(_a, ["theme", "variant", "size", "buttonRef", "onToggleChange", 'aria-label', "icon", "toggled", "children"]);
    var isInitialMount = React.useRef(true);
    React.useEffect(function () {
        if (isInitialMount.current) {
            isInitialMount.current = false;
        }
        else {
            if (toggled && typeof onToggleChange === 'function') {
                onToggleChange(toggled);
            }
        }
    }, [toggled, onToggleChange]);
    var containerStyles = __assign(__assign({ padding: 0, margin: variant === IconButtonVariant.Plain ? '-8px' : undefined, minWidth: size === 'small' ? spacing.l : spacing.xl, width: size === 'small' ? spacing.l : spacing.xl, height: size === 'small' ? spacing.l : spacing.xl }, getIconButtonBorderRadius(variant)), (_b = {}, _b['& .wd-icon'] = {
        display: 'inline-block',
        verticalAlign: 'middle',
        width: size === 'small' ? '20px' : undefined,
        height: size === 'small' ? '20px' : undefined,
    }, _b));
    return (React.createElement(ButtonContainer, __assign({ colors: getIconButtonColors(variant, theme, toggled), size: size, ref: buttonRef, fillIcon: toggled, extraStyles: containerStyles, "aria-pressed": toggled, "aria-label": iconArialabel }, elemProps), icon ? React.createElement(SystemIcon, { icon: icon }) : children));
};
IconButton.Variant = IconButtonVariant;
IconButton.Size = {
    Small: 'small',
    Medium: 'medium',
};
export default IconButton;
var getIconButtonBorderRadius = function (variant) {
    switch (variant) {
        case IconButtonVariant.Square:
        case IconButtonVariant.SquareFilled:
            return { borderRadius: borderRadius.m };
        default:
            return { borderRadius: borderRadius.circle };
    }
};
var getIconButtonColors = function (variant, theme, toggled) {
    var themePrimary = theme.canvas.palette.primary;
    switch (variant) {
        case IconButton.Variant.Square:
        case IconButtonVariant.Circle:
        default:
            return {
                default: {
                    background: toggled ? themePrimary.main : undefined,
                    icon: toggled ? themePrimary.contrast : colors.licorice200,
                },
                hover: {
                    background: toggled ? themePrimary.dark : colors.soap300,
                    icon: toggled ? themePrimary.contrast : colors.licorice500,
                },
                active: {
                    background: toggled ? themePrimary.dark : colors.soap500,
                    icon: toggled ? themePrimary.contrast : colors.licorice500,
                },
                focus: {
                    background: toggled ? themePrimary.main : undefined,
                    icon: toggled ? themePrimary.contrast : colors.licorice500,
                },
                disabled: {
                    background: toggled ? themePrimary.lightest : 'transparent',
                    icon: toggled ? themePrimary.light : colors.soap600,
                },
            };
        case IconButtonVariant.SquareFilled:
        case IconButtonVariant.CircleFilled:
            return {
                default: {
                    background: toggled ? themePrimary.main : colors.soap200,
                    icon: toggled ? themePrimary.contrast : colors.licorice200,
                },
                hover: {
                    background: toggled ? themePrimary.dark : colors.soap400,
                    icon: toggled ? themePrimary.contrast : colors.licorice500,
                },
                active: {
                    background: toggled ? themePrimary.dark : colors.soap500,
                    icon: toggled ? themePrimary.contrast : colors.licorice500,
                },
                focus: {
                    background: toggled ? themePrimary.main : colors.soap200,
                    icon: toggled ? themePrimary.contrast : colors.licorice500,
                },
                disabled: {
                    background: toggled ? themePrimary.lightest : colors.soap100,
                    icon: toggled ? themePrimary.light : colors.soap600,
                },
            };
        case IconButtonVariant.Plain:
            return {
                default: {
                    icon: toggled ? themePrimary.main : colors.licorice200,
                },
                hover: {
                    icon: toggled ? themePrimary.main : colors.licorice500,
                },
                active: {
                    icon: toggled ? themePrimary.main : colors.licorice500,
                },
                focus: {
                    icon: toggled ? themePrimary.main : colors.licorice500,
                    focusRing: focusRing({}, theme),
                },
                disabled: {
                    icon: toggled ? themePrimary.light : colors.soap600,
                },
            };
        case IconButtonVariant.Inverse:
            return {
                default: {
                    background: toggled ? themePrimary.contrast : undefined,
                    icon: toggled ? themePrimary.main : themePrimary.contrast,
                },
                hover: {
                    background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.2)',
                    icon: toggled ? themePrimary.main : themePrimary.contrast,
                },
                active: {
                    background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.3)',
                    icon: toggled ? themePrimary.main : themePrimary.contrast,
                },
                focus: {
                    background: toggled ? themePrimary.contrast : undefined,
                    icon: toggled ? themePrimary.main : themePrimary.contrast,
                    focusRing: focusRing({
                        separation: 2,
                        innerColor: 'currentColor',
                        outerColor: themePrimary.contrast,
                    }, theme),
                },
                disabled: {
                    background: toggled ? 'rgba(255,255,255,0.75)' : 'transparent',
                    icon: toggled ? themePrimary.main : 'rgba(255, 255, 255, 0.75)',
                },
            };
        case IconButtonVariant.InverseFilled:
            return {
                default: {
                    background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.2)',
                    icon: toggled ? themePrimary.main : themePrimary.contrast,
                },
                hover: {
                    background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.3)',
                    icon: toggled ? themePrimary.main : themePrimary.contrast,
                },
                active: {
                    background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.4)',
                    icon: toggled ? themePrimary.main : themePrimary.contrast,
                },
                focus: {
                    background: toggled ? themePrimary.contrast : 'rgba(0, 0, 0, 0.2)',
                    icon: toggled ? themePrimary.main : themePrimary.contrast,
                    focusRing: focusRing({
                        separation: 2,
                        innerColor: 'currentColor',
                        outerColor: themePrimary.contrast,
                    }, theme),
                },
                disabled: {
                    background: toggled ? 'rgba(255,255,255,0.75)' : 'rgba(0, 0, 0, 0.2)',
                    icon: toggled ? themePrimary.main : 'rgba(255, 255, 255, 0.75)',
                },
            };
    }
};
