{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport chroma from 'chroma-js';\nimport merge from 'lodash/merge';\nimport memoize from 'lodash/memoize';\nimport findKey from 'lodash/findKey';\nimport colors from '@workday/canvas-colors-web';\nimport { defaultCanvasTheme } from './theme';\nimport { ContentDirection } from './types';\nimport { pickForegroundColor } from '../utils';\nexport var ColorDirection;\n\n(function (ColorDirection) {\n  ColorDirection[ColorDirection[\"Darken\"] = 0] = \"Darken\";\n  ColorDirection[ColorDirection[\"Brighten\"] = 1] = \"Brighten\";\n})(ColorDirection || (ColorDirection = {}));\n\nexport function shiftColor(hexColor, direction) {\n  var canvasColor = findKey(colors, function (color) {\n    return color === hexColor;\n  });\n  var darken = direction === ColorDirection.Darken;\n\n  if (canvasColor) {\n    var colorRegex = /([a-zAz]*)(\\d{3})/g;\n    var match = colorRegex.exec(canvasColor);\n\n    if (match) {\n      var baseColor = match[1];\n      var shadeNumber = parseInt(match[2], 10);\n      var newShade = darken ? shadeNumber + 100 : shadeNumber - 100;\n\n      if (newShade >= 100 && newShade <= 600) {\n        return colors[baseColor + newShade];\n      }\n    }\n  }\n\n  try {\n    var newColor = darken ? chroma(hexColor).darken() : chroma(hexColor).brighten();\n    return newColor.hex();\n  } catch (e) {\n    console.warn(\"Invalid color '\" + hexColor + \"' used in theme\");\n    return hexColor;\n  }\n}\n\nfunction fillPalette(defaultPalette, palette) {\n  if (!palette) {\n    return {};\n  }\n\n  var main = palette.main || defaultPalette.main;\n  var dark = palette.dark || palette.main && shiftColor(palette.main, ColorDirection.Darken) || defaultPalette.dark;\n  var darkest = palette.darkest || palette.main && shiftColor(dark, ColorDirection.Darken) || defaultPalette.darkest;\n  var light = palette.light || palette.main && shiftColor(palette.main, ColorDirection.Brighten) || defaultPalette.light;\n  var lightest = palette.lightest || palette.main && shiftColor(light, ColorDirection.Brighten) || defaultPalette.lightest;\n  var contrast = palette.contrast || pickForegroundColor(main) || defaultPalette.contrast;\n  return {\n    lightest: lightest,\n    light: light,\n    main: main,\n    dark: dark,\n    darkest: darkest,\n    contrast: contrast\n  };\n}\n\nfunction calculateCanvasTheme(partialTheme) {\n  var _a = partialTheme.palette,\n      palette = _a === void 0 ? {} : _a,\n      _b = partialTheme.breakpoints,\n      breakpoints = _b === void 0 ? {} : _b,\n      direction = partialTheme.direction,\n      extraFields = __rest(partialTheme, [\"palette\", \"breakpoints\", \"direction\"]);\n\n  var _c = palette,\n      primary = _c.primary,\n      alert = _c.alert,\n      error = _c.error,\n      success = _c.success,\n      neutral = _c.neutral,\n      _d = _c.common,\n      common = _d === void 0 ? {} : _d;\n  var mergeable = {\n    palette: {\n      common: common,\n      primary: fillPalette(defaultCanvasTheme.palette.primary, primary),\n      alert: fillPalette(defaultCanvasTheme.palette.alert, alert),\n      error: fillPalette(defaultCanvasTheme.palette.error, error),\n      success: fillPalette(defaultCanvasTheme.palette.success, success),\n      neutral: fillPalette(defaultCanvasTheme.palette.neutral, neutral)\n    },\n    breakpoints: breakpoints,\n    direction: direction === ContentDirection.RTL ? direction : ContentDirection.LTR\n  };\n  return merge({}, defaultCanvasTheme, mergeable, extraFields);\n}\n\nexport var createCanvasTheme = memoize(calculateCanvasTheme, function () {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return JSON.stringify(args);\n});","map":null,"metadata":{},"sourceType":"module"}