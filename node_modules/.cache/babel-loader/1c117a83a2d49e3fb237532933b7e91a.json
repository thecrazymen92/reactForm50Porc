{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar _a;\n\nimport * as React from 'react';\nimport { colors, spacing, borderRadius } from '@workday/canvas-kit-react-core';\nimport { focusRing, useTheme } from '@workday/canvas-kit-react-common';\nimport { SystemIcon } from '@workday/canvas-kit-react-icon';\nimport { ButtonContainer } from './parts';\nvar containerStyles = (_a = {\n  padding: 0,\n  minWidth: spacing.l,\n  width: spacing.l,\n  height: spacing.l,\n  borderRadius: borderRadius.m\n}, _a['& .wd-icon'] = {\n  display: 'inline-block',\n  verticalAlign: 'middle',\n  width: 20,\n  height: 20\n}, _a);\n\nvar ToolbarIconButton = function ToolbarIconButton(_a) {\n  var _b = _a.theme,\n      theme = _b === void 0 ? useTheme() : _b,\n      buttonRef = _a.buttonRef,\n      onToggleChange = _a.onToggleChange,\n      iconArialabel = _a[\"aria-label\"],\n      icon = _a.icon,\n      toggled = _a.toggled,\n      children = _a.children,\n      elemProps = __rest(_a, [\"theme\", \"buttonRef\", \"onToggleChange\", 'aria-label', \"icon\", \"toggled\", \"children\"]);\n\n  var isInitialMount = React.useRef(true);\n  React.useEffect(function () {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      if (toggled && typeof onToggleChange === 'function') {\n        onToggleChange(toggled);\n      }\n    }\n  }, [toggled, onToggleChange]);\n  return React.createElement(ButtonContainer, __assign({\n    colors: getToolbarIconButtonColors(theme, toggled),\n    size: 'small',\n    ref: buttonRef,\n    fillIcon: toggled,\n    extraStyles: containerStyles,\n    \"aria-pressed\": toggled,\n    \"aria-label\": iconArialabel\n  }, elemProps), icon ? React.createElement(SystemIcon, {\n    icon: icon\n  }) : children);\n};\n\nexport default ToolbarIconButton;\n\nvar getToolbarIconButtonColors = function getToolbarIconButtonColors(theme, toggled) {\n  var themePrimary = theme.canvas.palette.primary;\n  return {\n    default: {\n      icon: toggled ? themePrimary.main : colors.licorice200,\n      background: toggled ? themePrimary.lightest : 'transparent'\n    },\n    hover: {\n      icon: toggled ? themePrimary.dark : colors.licorice500,\n      background: colors.soap300\n    },\n    active: {\n      icon: toggled ? themePrimary.dark : colors.licorice500,\n      background: colors.soap500\n    },\n    focus: {\n      icon: toggled ? themePrimary.main : colors.licorice200,\n      focusRing: focusRing({\n        width: 2,\n        separation: 0\n      }, theme),\n      background: toggled ? themePrimary.lightest : 'transparent'\n    },\n    disabled: {\n      icon: toggled ? themePrimary.light : colors.soap600,\n      background: toggled ? themePrimary.lightest : 'transparent'\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}