var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { spacing } from '@workday/canvas-kit-react-core';
import isPropValid from '@emotion/is-prop-valid';
import { ButtonIconPosition } from '../types';
import { SystemIcon } from '@workday/canvas-kit-react-icon';
import { styled } from '@workday/canvas-kit-react-common';
var ICON_SIZE = 24;
var SMALL_ICON_SIZE = 20;
var ButtonLabelIconStyled = styled('span', {
    shouldForwardProp: function (prop) { return isPropValid(prop) && prop !== 'size'; },
})({
    display: 'inline-block',
}, function (_a) {
    var size = _a.size;
    return ({
        width: size === 'small' ? SMALL_ICON_SIZE : ICON_SIZE,
        height: size === 'small' ? SMALL_ICON_SIZE : ICON_SIZE,
    });
}, function (_a) {
    var iconPosition = _a.iconPosition, dropdown = _a.dropdown;
    return ({
        marginLeft: iconPosition === ButtonIconPosition.Right
            ? undefined
            : "-" + (dropdown ? spacing.xxs : spacing.xxxs) + " !important",
        marginRight: iconPosition === ButtonIconPosition.Right
            ? "-" + (dropdown ? spacing.xxs : spacing.xxxs) + " !important"
            : undefined,
    });
});
export var ButtonLabelIcon = function (_a) {
    var icon = _a.icon, size = _a.size, dropdown = _a.dropdown, iconPosition = _a.iconPosition, elemProps = __rest(_a, ["icon", "size", "dropdown", "iconPosition"]);
    if (icon === undefined) {
        return null;
    }
    var iconSize = size === 'small' ? SMALL_ICON_SIZE : undefined;
    return (React.createElement(ButtonLabelIconStyled, __assign({ iconPosition: iconPosition, dropdown: dropdown, size: size }, elemProps),
        React.createElement(SystemIcon, { size: iconSize, icon: icon })));
};
