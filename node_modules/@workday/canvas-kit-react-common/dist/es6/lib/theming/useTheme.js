var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import get from 'lodash/get';
import { ThemeContext } from '@emotion/core';
import { defaultCanvasTheme, createCanvasTheme, } from './index';
var getFilledTheme = function (theme) { return (__assign(__assign({}, theme), { canvas: createCanvasTheme(theme.canvas) })); };
export function useTheme(theme) {
    if (theme && theme.canvas) {
        return getFilledTheme(theme);
    }
    try {
        var contextTheme = React.useContext(ThemeContext);
        if (contextTheme && contextTheme.canvas) {
            return getFilledTheme(contextTheme);
        }
    }
    catch (e) {
    }
    var windowTheme = typeof window !== 'undefined' && get(window, 'window.workday.canvas.theme');
    if (windowTheme) {
        return getFilledTheme({ canvas: windowTheme });
    }
    return { canvas: defaultCanvasTheme };
}
