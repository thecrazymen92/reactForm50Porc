import { CanvasBreakpoints, BreakpointFnParam } from './breakpoints';
export declare type CanvasThemePalette = {
    lightest: string;
    light: string;
    main: string;
    dark: string;
    darkest: string;
    contrast: string;
};
declare type CanvasThemeCommonPalette = {
    focusOutline: string;
};
export declare enum ContentDirection {
    LTR = "ltr",
    RTL = "rtl"
}
export interface CanvasTheme {
    palette: {
        common: CanvasThemeCommonPalette;
        primary: CanvasThemePalette;
        error: CanvasThemePalette;
        alert: CanvasThemePalette;
        success: CanvasThemePalette;
        neutral: CanvasThemePalette;
    };
    breakpoints: {
        values: CanvasBreakpoints;
        up: (key: BreakpointFnParam) => string;
        down: (key: BreakpointFnParam) => string;
        only: (key: BreakpointFnParam) => string;
        between: (start: BreakpointFnParam, end: BreakpointFnParam) => string;
    };
    direction: ContentDirection;
}
export interface Themeable {
    theme?: EmotionCanvasTheme;
}
declare type RecursivePartial<T> = {
    [P in keyof T]?: RecursivePartial<T[P]>;
};
export declare type PartialCanvasTheme = RecursivePartial<CanvasTheme>;
export declare type PartialCanvasThemePalette = RecursivePartial<CanvasThemePalette>;
export declare type PartialEmotionCanvasTheme = {
    canvas?: PartialCanvasTheme;
};
export declare type EmotionCanvasTheme = {
    canvas: CanvasTheme;
};
export {};
//# sourceMappingURL=types.d.ts.map