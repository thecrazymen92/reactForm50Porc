{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport canvas, { borderRadius, type } from '@workday/canvas-kit-react-core';\nimport { focusRing, mouseFocusBehavior } from '@workday/canvas-kit-react-common';\nimport { DeprecatedButtonVariant, ButtonSize } from './types';\nimport styled from '@emotion/styled';\nvar Container = styled('button')(__assign(__assign({\n  fontFamily: type.body.fontFamily,\n  fontSize: type.body.fontSize\n}, type.variant.button), {\n  boxSizing: 'border-box',\n  display: 'inline-flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  borderRadius: borderRadius.circle,\n  border: '1px solid transparent',\n  boxShadow: 'none',\n  position: 'relative',\n  cursor: 'pointer',\n  outline: 'none',\n  transition: 'box-shadow 120ms linear, border 120ms linear, background-color 120ms linear, color 120ms linear',\n  '&:hover:active': {\n    transitionDuration: '40ms'\n  },\n  '&:disabled, &:disabled:active': {\n    cursor: 'default',\n    boxShadow: 'none'\n  }\n}), function (_a) {\n  var size = _a.size;\n\n  switch (size) {\n    case 'large':\n      return {\n        height: '40px',\n        padding: \"0 \" + canvas.spacing.l,\n        minWidth: '112px',\n        maxWidth: '288px'\n      };\n\n    case 'medium':\n    default:\n      return {\n        height: '24px',\n        padding: \"0 \" + canvas.spacing.m,\n        minWidth: '80px',\n        maxWidth: '200px',\n        fontSize: type.body2.fontSize\n      };\n\n    case 'small':\n      return {\n        height: '18px',\n        padding: \"0 \" + canvas.spacing.xxs,\n        minWidth: '56px',\n        maxWidth: '120px',\n        fontSize: '10px',\n        lineHeight: 'normal'\n      };\n  }\n}, function (_a) {\n  var grow = _a.grow;\n  return grow && {\n    width: '100%',\n    maxWidth: '100%'\n  };\n}, function (_a) {\n  var variant = _a.variant;\n  var buttonColors;\n\n  switch (variant) {\n    case DeprecatedButtonVariant.Primary:\n      buttonColors = canvas.buttonColors.primary;\n      break;\n\n    case DeprecatedButtonVariant.Secondary:\n    default:\n      buttonColors = canvas.buttonColors.secondary;\n      break;\n\n    case DeprecatedButtonVariant.Delete:\n      buttonColors = __assign(__assign({}, canvas.buttonColors.delete), {\n        focusBorder: canvas.colors.cinnamon500,\n        activeBorder: canvas.colors.cinnamon500\n      });\n      break;\n  }\n\n  if (!buttonColors) {\n    return {};\n  }\n\n  var baseStyles = {\n    backgroundColor: buttonColors.background,\n    borderColor: buttonColors.border,\n    color: buttonColors.text\n  };\n  var hoverStyles = {\n    ':hover': {\n      backgroundColor: buttonColors.hoverBackground,\n      borderColor: buttonColors.hoverBorder,\n      color: buttonColors.hoverText\n    }\n  };\n  var activeStyles = {\n    ':active, :focus:active, :hover:active': {\n      backgroundColor: buttonColors.activeBackground,\n      borderColor: buttonColors.activeBorder,\n      color: buttonColors.activeText\n    }\n  };\n  return __assign(__assign(__assign(__assign(__assign(__assign({}, baseStyles), {\n    ':focus': {\n      backgroundColor: buttonColors.focusBackground,\n      borderColor: buttonColors.focusBorder,\n      color: buttonColors.focusText\n    }\n  }), activeStyles), hoverStyles), {\n    ':disabled, :active:disabled, :focus:disabled, :hover:disabled': {\n      backgroundColor: buttonColors.disabledBackground,\n      borderColor: buttonColors.disabledBorder,\n      color: buttonColors.disabledText\n    },\n    '&:not([disabled])': {\n      '&:focus': __assign({\n        borderColor: buttonColors.focusBorder\n      }, focusRing()),\n      '&:active': __assign({\n        borderColor: buttonColors.activeBorder\n      }, focusRing())\n    }\n  }), mouseFocusBehavior({\n    '&:focus': __assign(__assign(__assign(__assign({}, baseStyles), {\n      outline: 'none',\n      boxShadow: 'none',\n      animation: 'none'\n    }), hoverStyles), activeStyles)\n  }));\n});\n\nvar DeprecatedButton = function DeprecatedButton(_a) {\n  var _b = _a.variant,\n      variant = _b === void 0 ? DeprecatedButtonVariant.Secondary : _b,\n      _c = _a.size,\n      size = _c === void 0 ? 'large' : _c,\n      buttonRef = _a.buttonRef,\n      children = _a.children,\n      elemProps = __rest(_a, [\"variant\", \"size\", \"buttonRef\", \"children\"]);\n\n  React.useEffect(function () {\n    console.warn('This component is now deprecated, consider using the new Button component');\n  }, []);\n  return React.createElement(Container, __assign({\n    variant: variant,\n    size: size,\n    ref: buttonRef\n  }, elemProps), children);\n};\n\nDeprecatedButton.Variant = DeprecatedButtonVariant;\nDeprecatedButton.Size = ButtonSize;\nexport default DeprecatedButton;","map":null,"metadata":{},"sourceType":"module"}