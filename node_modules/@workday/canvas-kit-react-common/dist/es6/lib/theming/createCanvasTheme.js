var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import chroma from 'chroma-js';
import merge from 'lodash/merge';
import memoize from 'lodash/memoize';
import findKey from 'lodash/findKey';
import colors from '@workday/canvas-colors-web';
import { defaultCanvasTheme } from './theme';
import { ContentDirection, } from './types';
import { pickForegroundColor } from '../utils';
export var ColorDirection;
(function (ColorDirection) {
    ColorDirection[ColorDirection["Darken"] = 0] = "Darken";
    ColorDirection[ColorDirection["Brighten"] = 1] = "Brighten";
})(ColorDirection || (ColorDirection = {}));
export function shiftColor(hexColor, direction) {
    var canvasColor = findKey(colors, function (color) { return color === hexColor; });
    var darken = direction === ColorDirection.Darken;
    if (canvasColor) {
        var colorRegex = /([a-zAz]*)(\d{3})/g;
        var match = colorRegex.exec(canvasColor);
        if (match) {
            var baseColor = match[1];
            var shadeNumber = parseInt(match[2], 10);
            var newShade = darken ? shadeNumber + 100 : shadeNumber - 100;
            if (newShade >= 100 && newShade <= 600) {
                return colors[(baseColor + newShade)];
            }
        }
    }
    try {
        var newColor = darken ? chroma(hexColor).darken() : chroma(hexColor).brighten();
        return newColor.hex();
    }
    catch (e) {
        console.warn("Invalid color '" + hexColor + "' used in theme");
        return hexColor;
    }
}
function fillPalette(defaultPalette, palette) {
    if (!palette) {
        return {};
    }
    var main = palette.main || defaultPalette.main;
    var dark = palette.dark ||
        (palette.main && shiftColor(palette.main, ColorDirection.Darken)) ||
        defaultPalette.dark;
    var darkest = palette.darkest ||
        (palette.main && shiftColor(dark, ColorDirection.Darken)) ||
        defaultPalette.darkest;
    var light = palette.light ||
        (palette.main && shiftColor(palette.main, ColorDirection.Brighten)) ||
        defaultPalette.light;
    var lightest = palette.lightest ||
        (palette.main && shiftColor(light, ColorDirection.Brighten)) ||
        defaultPalette.lightest;
    var contrast = palette.contrast || pickForegroundColor(main) || defaultPalette.contrast;
    return {
        lightest: lightest,
        light: light,
        main: main,
        dark: dark,
        darkest: darkest,
        contrast: contrast,
    };
}
function calculateCanvasTheme(partialTheme) {
    var _a = partialTheme.palette, palette = _a === void 0 ? {} : _a, _b = partialTheme.breakpoints, breakpoints = _b === void 0 ? {} : _b, direction = partialTheme.direction, extraFields = __rest(partialTheme, ["palette", "breakpoints", "direction"]);
    var _c = palette, primary = _c.primary, alert = _c.alert, error = _c.error, success = _c.success, neutral = _c.neutral, _d = _c.common, common = _d === void 0 ? {} : _d;
    var mergeable = {
        palette: {
            common: common,
            primary: fillPalette(defaultCanvasTheme.palette.primary, primary),
            alert: fillPalette(defaultCanvasTheme.palette.alert, alert),
            error: fillPalette(defaultCanvasTheme.palette.error, error),
            success: fillPalette(defaultCanvasTheme.palette.success, success),
            neutral: fillPalette(defaultCanvasTheme.palette.neutral, neutral),
        },
        breakpoints: breakpoints,
        direction: direction === ContentDirection.RTL ? direction : ContentDirection.LTR,
    };
    return merge({}, defaultCanvasTheme, mergeable, extraFields);
}
export var createCanvasTheme = memoize(calculateCanvasTheme, function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return JSON.stringify(args);
});
