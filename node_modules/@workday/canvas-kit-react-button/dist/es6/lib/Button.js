var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { colors } from '@workday/canvas-kit-react-core';
import { useTheme, } from '@workday/canvas-kit-react-common';
import { ButtonVariant, DropdownButtonVariant, ButtonSize, } from './types';
import { ButtonContainer, ButtonLabel, ButtonLabelData, ButtonLabelIcon } from './parts';
var Button = function (_a) {
    var _b = _a.theme, theme = _b === void 0 ? useTheme() : _b, _c = _a.variant, variant = _c === void 0 ? ButtonVariant.Secondary : _c, _d = _a.size, size = _d === void 0 ? 'medium' : _d, buttonRef = _a.buttonRef, dataLabel = _a.dataLabel, icon = _a.icon, children = _a.children, elemProps = __rest(_a, ["theme", "variant", "size", "buttonRef", "dataLabel", "icon", "children"]);
    return (React.createElement(ButtonContainer, __assign({ colors: getButtonColors(variant, theme), size: size, ref: buttonRef }, elemProps),
        icon && size !== 'small' && React.createElement(ButtonLabelIcon, { size: size, icon: icon }),
        React.createElement(ButtonLabel, null, children),
        dataLabel && size !== 'small' && React.createElement(ButtonLabelData, null, dataLabel)));
};
Button.Variant = ButtonVariant;
Button.Size = ButtonSize;
export default Button;
export var getButtonColors = function (variant, _a) {
    var themePrimary = _a.canvas.palette.primary;
    switch (variant) {
        case ButtonVariant.Primary:
        case DropdownButtonVariant.Primary:
            return {
                default: {
                    background: themePrimary.main,
                    icon: themePrimary.contrast,
                    label: themePrimary.contrast,
                },
                hover: {
                    background: themePrimary.dark,
                },
                active: {
                    background: themePrimary.darkest,
                },
                focus: {
                    background: themePrimary.main,
                },
                disabled: {
                    background: themePrimary.light,
                },
            };
        case ButtonVariant.Secondary:
        case DropdownButtonVariant.Secondary:
        default:
            return {
                default: {
                    background: colors.soap200,
                    icon: colors.licorice200,
                    label: colors.blackPepper400,
                    labelData: colors.blackPepper400,
                },
                hover: {
                    background: colors.soap400,
                    icon: colors.licorice500,
                },
                active: {
                    background: colors.soap500,
                    icon: colors.licorice500,
                },
                focus: {
                    background: colors.soap200,
                    icon: colors.licorice500,
                },
                disabled: {
                    background: colors.soap100,
                    icon: colors.soap600,
                    label: colors.licorice100,
                    labelData: colors.licorice100,
                },
            };
    }
};
